#!/bin/bash
# shellcheck source=/dev/null
# shellcheck disable=SC2154		# we work with steam variables here which are unknown to shellcheck

PROGNAME="SteamTinkerLaunch"
PROGVERS="v0.99.0"
PROGCMD="$(basename "$0")"
PROJECTPAGE="https://github.com/frostworx/steamtinkerlaunch"

function howto {
	echo "========================="
	echo "$PROGNAME $PROGVERS"
	echo "========================="
	echo "  general usage:"
	echo "-----------------------"
	echo "  Just add this program to your steam game command line like:"
	echo "  'stl %command%'"
	echo ""
	echo "  game specific use:"
	echo "-----------------------"
	echo "  When starting a game with $PROGCMD it will check if a config file exists in $STLGAMEDIR/$SteamAppId.conf for the game"
	echo "  if it is not available it is created from the default config file (which is automatically created if not found)."
	echo ""
	echo "  When starting the game a small requester will popup (default 2 seconds)."
	echo "  When you want to change settings for that game press space to open the game configuration and adjust it to your needs."
	echo "  The game start will wait until you're done and your changes are used on the fly."
	echo "  for more functions please check the configs and or the README - if something is not clear please file a bugreport on the projectpage $PROJECTPAGE"
}

if [ -z "$SteamAppId" ];then
	AID="$PROGCMD"
else
	AID="$SteamAppId"
fi

if [ -z "$XDG_CONFIG_HOME" ]; then
	STLCFGDIR="$HOME/.config/$PROGCMD"														# either hardcoded config dir
else
	STLCFGDIR="$XDG_CONFIG_HOME/$PROGCMD"													# or in XDG_CONFIG_HOME if the user set the variable
fi

STLDEFGLOBALCFG="$STLCFGDIR/global.conf"													# global config
STLDEFGAMECFG="$STLCFGDIR/default_template.conf"											# the default config template used to create new per game configs - will be autocreated if not found
LOGDIR="$STLCFGDIR/logs"																	# default logfile dir

STLGAMEDIR="$STLCFGDIR/gamecfgs"															# default basedir for game the gamespecific configs
STLGAMECFG="$STLGAMEDIR/$AID.conf"															# the game specific config file which is used by the launched game - created from $STLDEFGAMECFG if not found

SBSTWEAKDIR="$STLCFGDIR/sbs"																# directory for optional config overrides for easier side-by-side VR gaming
TWEAKDIR="$STLCFGDIR/tweaks"																# directory for optional config overrides for easier general VR gaming
TWEAKCFG="$TWEAKDIR/$AID.conf"																# the game specific shareable config tweak overrides - header autocreated if global CREATETWEAKS is set to 1

STLDXVKDIR="$STLCFGDIR/dxvk"																# base dxvk config dir from where default per game configs are automatically parsed

GP="$(awk -F 'waitforexitandrun ' '{print $NF}' <<< "$@" | awk -F ' GID=' '{print $1}' | awk -F '.exe' '{print $1".exe"}')"	# the absolute game path of the windows game exe - dirty hack to remove command line parameters
GE="$(basename "$GP" | awk -F '.exe' '{print $1}')"											# just the windows game exe name - will be used as game identifier, as we don't have the steamid here :(
GFD="$(dirname "$GP")"																		# the absolute directory where the game exe lives - unused for optional custom program
GN="$(awk -F '/' '{print $1}' <<< "$(awk -F 'common/' '{print $2}' <<< "$PWD")")"			# this is hopefully the proper game name
GWIDFILE=/tmp/stl-sbsgwid																	# temp file holding the game window id - TODO fix export later

#### VKBASALT BLOCK START ####

function usevkBasalt {
	if [ "$ENABLE_VKBASALT" -eq 1 ] ; then
		writelog "$(date) - INFO - ${FUNCNAME[0]} - vkBasalt enabled"
		if [ ! -f "$VKBASALT_CONFIG_FILE" ]; then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - creating default VKBASALT_CONFIG_FILE $VKBASALT_CONFIG_FILE"
			{
			echo "effects = reshade"
			echo "reshadeIncludePath = $STLCFGDIR/Depth3D/Shaders"
			echo "reshade = $STLCFGDIR/Depth3D/Shaders/SuperDepth3D_VR.fx"
			} >> "$VKBASALT_CONFIG_FILE"
		else
			writelog "$(date) - SKIP - ${FUNCNAME[0]} - default VKBASALT_CONFIG_FILE $VKBASALT_CONFIG_FILE already exists"
		fi
		
		if [ ! -f "$STLCFGDIR/Depth3D/Shaders/SuperDepth3D_VR.fx" ]; then
			writelog "$(date) - 404 - ${FUNCNAME[0]} - Depth3D shader $STLCFGDIR/Depth3D/Shaders/SuperDepth3D_VR.fx not found"
			if [ "$CLONE_DEPTH3D" -eq 1 ]; then
				writelog "$(date) - INFO - ${FUNCNAME[0]} - CLONE_DEPTH3D is enabled so checking it out"
				checkReShadeDepth3D
			else
				writelog "$(date) - SKIP - ${FUNCNAME[0]} - CLONE_DEPTH3D skipping the installation"
				export ENABLE_VKBASALT=0
			fi
		else
			writelog "$(date) - OK - ${FUNCNAME[0]} - looks like Depth3D shader is ready at $STLCFGDIR/Depth3D/Shaders/SuperDepth3D_VR.fx"
		fi
	fi
}

#### VKBASALT BLOCK END ####


#### SBS VR BLOCK START ####

SBSVRWINNAME=vr-video-player	
STEAMVRARGS=(-applaunch 250820)

# returns the windowid of the biggest window of the main proton exe (a/the exe with win drive Z:) 
function VRAUTOWINDOWID {
	MAXSIZ=0
	MAXWIN=0
	while read -r WINS; do
		WSIZ=$(($(xwininfo -id "$WINS" -stats | awk '$1=="-geometry" {print $2}' | awk -F '+'  '{print $1}' | sed "s:x:\*:")))
		if [ "$WSIZ" -gt "$MAXSIZ" ]; then
			MAXSIZ=$WSIZ
			MAXWIN=$WINS
		fi
	done <<< "$(xdotool search --pid "$(pgrep "" -a | grep -v grep | grep "Z:" | grep "\.exe" | cut -d ' ' -f1)")"
	printf 0x%x'\n' "$MAXWIN"
}

function SBSstartSVR {
	SVRJUSTSTARTED=0
	
	writelog "$(date) - INFO - ${FUNCNAME[0]} - -------- starting SBS-VR --------"

	if [ "$(pgrep "" -a | grep -v grep | grep "/vrcompositor" -c)" -eq 0 ] ; then
		writelog "$(date) - INFO - ${FUNCNAME[0]} - starting SteamVR"
		if ! steam "${STEAMVRARGS[@]}" 2>/dev/null >/dev/null ; then
			writelog "$(date) - SKIP - ${FUNCNAME[0]} - starting SteamVR FAILED - skipping SBS-VR"
			export RUNSBSVR=0
		else
			SVRJUSTSTARTED=1
		fi
	fi

	
	if [ "$(pgrep "" -a | grep -v grep | grep "/vrstartup" -c)" -eq 0 ] ; then
		writelog "$(date) - INFO - ${FUNCNAME[0]} - no vrstartup process running"
	else
		if [ "$SVRJUSTSTARTED" -eq 1 ]; then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - SteamVR initializing"
			while true; do
				writelog "$(date) - INFO - ${FUNCNAME[0]} - waiting for end of vrstartup TIMEOUT?"
				if [ "$(pgrep "" -a | grep -v grep | grep "/vrstartup" -c)" -eq 0 ] ; then
					break
				fi
			done
		else
			writelog "$(date) - SKIP - ${FUNCNAME[0]} - vrstartup found, but we didn't start steamvr before! - skipping SBS-VR - just in case"
			export RUNSBSVR=0
		fi
	fi

	if [ "$SVRJUSTSTARTED" -eq 1 ]; then
		while true; do
			if [ "$(pgrep "" -a | grep -v grep | grep "/vrstartup" -c)" -eq 0 ] ; then
				break
			fi
			writelog "$(date) - WAIT - ${FUNCNAME[0]} - waiting for end of vrstartup TIMEOUT?"
		done
	fi
	
	if [ "$SVRJUSTSTARTED" -eq 1 ]; then
	MAXWAIT=10
	COUNTER=0
		while ! pgrep "" -a | grep -v grep | grep "/vrcompositor" -q; do
			if [[ "$COUNTER" -ge "MAXWAIT" ]]; then
				writelog "$(date) - SKIP - ${FUNCNAME[0]} - ERROR - timeout waiting for SteamVR - exit"
				pkill -9 "$VRVIDEOPLAYER"
				RUNSBSVR=0
				exit 1
			fi
			writelog "$(date) - WAIT - ${FUNCNAME[0]} - sec $COUNTER/$MAXWAIT waiting for vrcompositor"
			COUNTER=$((COUNTER+1))
			sleep 1
		done
	else
		writelog "$(date) - INFO - ${FUNCNAME[0]} -  we didn't start steamvr before so no need to wait for vrcompositor"
	fi

	if pgrep "" -a | grep -v grep | grep "/vrcompositor" -q ; then
		writelog "$(date) - OK - ${FUNCNAME[0]} - success SteamVR running"
	else
		writelog "$(date) - SKIP - ${FUNCNAME[0]} - SteamVR start failed - vrcompositor still not running - skipping SBS-VR!"
		export RUNSBSVR=0
	fi
}

function SBSgetGamePID {
	if [ "$RUNSBSVR" -ge 1 ]; then

		if [ "$SAVESBSWINNAME" -gt 0 ]; then
			if [ ! -f "$SBSTWEAKDIR/$AID.conf" ]; then
				writelog "$(date) - INFO - ${FUNCNAME[0]} - SAVESBSWINNAME is $SAVESBSWINNAME so waiting for $SBSTWEAKDIR/$AID.conf to appear holding the window name"
				while [ ! -f "$SBSTWEAKDIR/$AID.conf" ]; do
					writelog "$(date) - WAIT - ${FUNCNAME[0]} - waiting for $SBSTWEAKDIR/$AID.conf to appear"
					sleep 1
				done
			fi

			if [ -f "$SBSTWEAKDIR/$AID.conf" ]; then
				writelog "$(date) - INFO - ${FUNCNAME[0]} - config $SBSTWEAKDIR/$AID.conf is ready, getting the window name"
				exportCfgFile "$SBSTWEAKDIR/$AID.conf"
			fi
		fi

		if [ -n "$VRGAMEWINDOW" ]; then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - windowname VRGAMEWINDOW $VRGAMEWINDOW provided, explicit search for the game window"
		else
			writelog "$(date) - INFO - ${FUNCNAME[0]} - no windowname VRGAMEWINDOW provided, automatic generic search for the game window"
		fi

		writelog "$(date) - INFO - ${FUNCNAME[0]} - gamewindow $VRGAMEWINDOW found, getting the game PID"

		while true; do
			if [ -n "$VRGAMEWINDOW" ]; then
				GPID="$(xwininfo -name "${VRGAMEWINDOW//\"/}" -wm | grep "Process id:"   | awk -F 'Process id: ' '{print $2}' | cut -d ' ' -f1)"
				if [ -n "$GPID" ]; then
					writelog "$(date) - INFO - ${FUNCNAME[0]} - game pid $GPID found for VRGAMEWINDOW $VRGAMEWINDOW"
					export SBSVRKGPID="$GPID"
					break
				fi
			else
				GPID="$(pgrep "" -a | grep "Z:" | grep "\.exe" | cut -d ' ' -f1)"
				if [ -n "$GPID" ]; then
					writelog "$(date) - INFO - ${FUNCNAME[0]} - game pid $GPID found"
					export SBSVRKGPID="$GPID"
					break
				fi
			fi
		done

		writelog "$(date) - OK - ${FUNCNAME[0]} - success - found PID $SBSVRKGPID for gamewindow $VRGAMEWINDOW"
	else
		writelog "$(date) - SKIP - ${FUNCNAME[0]} - skipping because RUNSBSVR was set to 0"
	fi
}

function SBSrunVRVideoPlayer {
	VRGAMEWINDOWID="$1"

	if [ "$RUNSBSVR" -ge 1 ]; then
		if [ -z "$VRGAMEWINDOWID" ]; then
			writelog "$(date) - SKIP - ${FUNCNAME[0]} - ERROR - VRGAMEWINDOWID $VRGAMEWINDOWID is empty - "
			writelog "$(date) - SKIP - ${FUNCNAME[0]} - ERROR - forcefully killing game with pkill -9 $SBSVRKGPID - should exit this script as well"
			pkill -9 "$SBSVRKGPID"
		else
			if [ -z "$VRVIDEOPLAYERARGS" ];
			then
				writelog "$(date) - SKIP - ${FUNCNAME[0]} - ERROR - no VRVIDEOPLAYERARGS $VRVIDEOPLAYERARGS"
			fi
			
			IFS=" " read -r -a RUNVRVIDEOPLAYERARGS <<< "$VRVIDEOPLAYERARGS"
			writelog "$(date) - INFO - ${FUNCNAME[0]} - starting $VRVIDEOPLAYER with args ${RUNVRVIDEOPLAYERARGS[*]} for windowid $VRGAMEWINDOWID"

			GWIDDEC="$(("$VRGAMEWINDOWID"))"
#			export GWIDDEC="$(("$VRGAMEWINDOWID"))" # wtf TODO
			echo "GWIDDEC=$GWIDDEC" > "$GWIDFILE"

			if [ -z "$SBSZOOM" ]; then
				"$VRVIDEOPLAYER" "${RUNVRVIDEOPLAYERARGS[@]}" "$VRGAMEWINDOWID"  2>/dev/null &
			else
				"$VRVIDEOPLAYER" "${RUNVRVIDEOPLAYERARGS[@]}" --zoom "$SBSZOOM" "$VRGAMEWINDOWID"  2>/dev/null &
			fi
			
			writelog "$(date) - INFO - ${FUNCNAME[0]} - waiting for $VRVIDEOPLAYER window $SBSVRWINNAME for VRGAMEWINDOWID $VRGAMEWINDOWID"

	MAXWAIT=20
	COUNTER=0
			while ! xwininfo -name "$SBSVRWINNAME" -stats  >/dev/null 2>/dev/null; do
				if [[ "$COUNTER" -ge "MAXWAIT" ]]; then
					writelog "$(date) - SKIP - ${FUNCNAME[0]} - ERROR - timeout waiting for $VRVIDEOPLAYER - exit"
					pkill -9 "$VRVIDEOPLAYER"
					RUNSBSVR=0
					exit 1
				fi

				if ! pgrep "$VRVIDEOPLAYER" ; then
					writelog "$(date) - SKIP - ${FUNCNAME[0]} - ERROR - $VRVIDEOPLAYER not running (crashed?) no need to wait for its window to appear - exit"
					RUNSBSVR=0
					exit 1
				fi
				
				writelog "$(date) - WAIT - ${FUNCNAME[0]} - WAIT - $COUNTER/$MAXWAIT sec waiting for $VRVIDEOPLAYER window $SBSVRWINNAME"
				COUNTER=$((COUNTER+1))
				sleep 1
			done

# player windowid:
#			SBSVRWID=$(printf 0x%x "$(xdotool search --name "$SBSVRWINNAME")")
			SBSVRWID=$(xwininfo -name "$SBSVRWINNAME" -stats | grep "^xwininfo" | awk -F 'id: ' '{print $2}' | cut -d ' ' -f1)
			if [ -n "$SBSVRWID" ]; then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - pressing w in $VRVIDEOPLAYER window $SBSVRWINNAME to adjust view: xdotool windowactivate --sync $SBSVRWID key w"
			xdotool windowactivate --sync "$SBSVRWID" key w

			writelog "$(date) - INFO - ${FUNCNAME[0]} - activating gamewindow with id $VRGAMEWINDOWID for input"
			xdotool windowactivate --sync "$VRGAMEWINDOWID" click 1
			else
				writelog "$(date) - SKIP - ${FUNCNAME[0]} - WARN - SBSVRWID $SBSVRWID is empty!"
			fi
		fi
	else
		writelog "$(date) - SKIP - ${FUNCNAME[0]} - skipping because RUNSBSVR was set to 0"
	fi
}

function SBSinitVRVideoPlayer {
	if [ "$RUNSBSVR" -ge 1 ]; then
		if [ -x "$(command -v "$VRVIDEOPLAYER" 2>/dev/null)" ]; then

			if [ "$SAVESBSWINNAME" -gt 0 ]; then
				if [ ! -f "$SBSTWEAKDIR/$AID.conf" ]; then
					writelog "$(date) - INFO - ${FUNCNAME[0]} - SAVESBSWINNAME is $SAVESBSWINNAME so waiting for $SBSTWEAKDIR/$AID.conf to appear holding the window name"
					while [ ! -f "$SBSTWEAKDIR/$AID.conf" ]; do
						writelog "$(date) - WAIT - ${FUNCNAME[0]} - waiting for $SBSTWEAKDIR/$AID.conf to appear"
						sleep 1
					done
				fi

				if [ -f "$SBSTWEAKDIR/$AID.conf" ]; then
					writelog "$(date) - INFO - ${FUNCNAME[0]} - config $SBSTWEAKDIR/$AID.conf is ready, getting the window name"
					exportCfgFile "$SBSTWEAKDIR/$AID.conf"
				fi
			fi

			if [ -z "$VRGAMEWINDOW" ]; then
				if [ -n "$(VRAUTOWINDOWID)" ]; then
					writelog "$(date) - INFO - ${FUNCNAME[0]} - trying to start $VRVIDEOPLAYER with automatically detected windowID $(VRAUTOWINDOWID):"
					SBSrunVRVideoPlayer	"$(VRAUTOWINDOWID)" 2>/dev/null &
				else
					writelog "$(date) - SKIP - ${FUNCNAME[0]} - ERROR - VRAUTOWINDOWID $(VRAUTOWINDOWID) is empty"
				fi
			else
				VRGAMEWINDOWID="$(xwininfo -name "${VRGAMEWINDOW//\"/}" -stats | grep "^xwininfo" | awk -F 'id: ' '{print $2}' | cut -d ' ' -f1)"
				if [ -z "$VRGAMEWINDOWID" ]; then
					writelog "$(date) - SKIP - ${FUNCNAME[0]} - ERROR - could not find windowid $VRGAMEWINDOWID for the windowname $VRGAMEWINDOW"
					RUNSBSVR=0
				else
					writelog "$(date) - INFO - ${FUNCNAME[0]} - found windowid $VRGAMEWINDOWID for the windowname $VRGAMEWINDOW"
					SBSrunVRVideoPlayer	"$VRGAMEWINDOWID" 2>/dev/null &
				fi
			fi
		else
			writelog "$(date) - SKIP - ${FUNCNAME[0]} - command $VRVIDEOPLAYER not found - skipping"
		fi
	else
		writelog "$(date) - SKIP - ${FUNCNAME[0]} - skipping because RUNSBSVR was set to 0"
	fi
}

function SBSstopVRVideoPlayer {
	if [ "$RUNSBSVR" -ge 1 ]; then
		writelog "$(date) - INFO - ${FUNCNAME[0]} - waiting for game process $SBSVRKGPID to finish..."
		
		if [ "$(pgrep "" -a | grep -v grep | grep "/vrcompositor" -c)" -eq 0 ] ; then
			writelog "$(date) - SKIP - ${FUNCNAME[0]} - ERROR - vrcompositor not running but it should - bailing out DRYRUN"
#			pkill -9 "$VRVIDEOPLAYER"
#			writelog "$(date) - SKIP - ${FUNCNAME[0]} - ########## killed SBS-VR ##########"
#			exit
		fi

		tail --pid="$SBSVRKGPID" -f /dev/null
		writelog "$(date) - INFO - ${FUNCNAME[0]} - game process $SBSVRKGPID finished - closing $VRVIDEOPLAYER"

		if [ -f "$GWIDFILE" ]; then
			source "$GWIDFILE"
			GWIDTXT=/tmp/"$VRVIDEOPLAYER"_"$GWIDDEC"

			if [ -f "$GWIDTXT" ]; then
				writelog "$(date) - INFO - ${FUNCNAME[0]} - $GWIDTXT found"
				updateConfigEntry "SBSZOOM" "$(cat "$GWIDTXT")" "$SBSTWEAKDIR/$AID.conf"
				rm "$GWIDTXT" >/dev/null 2>/dev/null
			fi
			rm "$GWIDFILE" >/dev/null 2>/dev/null
		fi
		pkill -9 "$VRVIDEOPLAYER"

		writelog "$(date) - OK - ${FUNCNAME[0]} - -------- finished SBS-VR --------"
	else
		writelog "$(date) - SKIP - ${FUNCNAME[0]} - skipping because RUNSBSVR was set to 0"
	fi
}

function runSBSVR {
	if [ "$RUNSBSVR" -ge 1 ]; then
		SBSstartSVR
		SBSgetGamePID
		SBSinitVRVideoPlayer
		SBSstopVRVideoPlayer
	fi
}

# start game in side-by-side VR:
function checkSBSVRLaunch {
	if [ "$RUNSBSVR" -ge 1 ]; then
	# override game configs with a sbs-tweak config if available:

	# first look for a global tweak:
		if [ -f "$GLOBALSBSTWEAKDIR/$AID.conf" ]; then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - VR using overrides found in $GLOBALSBSTWEAKDIR/$AID.conf"
			exportCfgFile "$GLOBALSBSTWEAKDIR/$AID.conf"
		fi

	# then for a user tweak - (overriding the global one):
		if [ -f "$SBSTWEAKDIR/$AID.conf" ]; then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - VR using overrides found in $SBSTWEAKDIR/$AID.conf"
			exportCfgFile "$SBSTWEAKDIR/$AID.conf"
		fi

	# Crysis 2 enable SBS in gameconfig:
	if [ "$AID" -eq "108800" ]; then
		CRY2CFG="$STEAM_COMPAT_DATA_PATH/pfx/drive_c/users/steamuser/Saved Games/Crysis2/game.cfg"
		if [ -f "$CRY2CFG" ]; then
			writelog "$(date) - HACK - ${FUNCNAME[0]} - SteamID $AID Crysis 2 found - editing gameconfig $CRY2CFG to enable Stereo Support"
			echo "r_StereoSupportAMD=1" >> "$CRY2CFG"
			sort -u "$CRY2CFG" -o "$CRY2CFG"
		else
			writelog "$(date) - SKIP - ${FUNCNAME[0]} -HACK failed - SteamID $AID Crysis 2 found but gameconfig $CRY2CFG not found to insert Stereo Support - restarting the game should fix this"
		fi
	fi

	# start the whole side-by-side process:
		export VRGAMEWINDOW="$VRGAMEWINDOW"
		writelog "$(date) - INFO - ${FUNCNAME[0]} - ${FUNCNAME[0]} - starting VRlaunch $VRGAMEWINDOW for $AID"
		if [ "$RUNSBSVR" -eq 1 ]; then
		runSBSVR &
		elif [ "$RUNSBSVR" -gt 1 ]; then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - RUNSBSVR is greater than 1 - starting SteamVR and SBS delayed for RUNSBSVR $RUNSBSVR seconds"
			( sleep "$RUNSBSVR"; runSBSVR) &
		else
			writelog "$(date) - SKIP - ${FUNCNAME[0]} - ${FUNCNAME[0]} ERROR - RUNSBSVR is $RUNSBSVR which is invalid - setting to 0"
			RUNSBSVR=0
		fi
	fi
}


##### SBS VR BLOCK END #####

#### RESHADE BLOCK START ####

STLRSCFG="$STLCFGDIR/reshade.conf"															# reshade config
RS_D3D47_DEST="d3dcompiler_47.dll"
RS_DX_DEST="dxgi.dll"
RS_D9_DEST="d3d9.dll"

# prepare reshade files if not found:
function prepareReshadeFiles {
# create config if not found:
	if [ ! -f "$STLRSCFG" ]; then
		writelog "$(date) - INFO - ${FUNCNAME[0]} - creating $STLRSCFG"
		{
		echo "## ReShade online ressources - see README:"
		echo "DL_D3D47_64=https://lutris.net/files/tools/dll/d3dcompiler_47.dll"
		echo "DL_D3D47_32=http://dege.freeweb.hu/dgVoodoo2/D3DCompiler_47.zip"
		echo "RSSETUP=https://reshade.me/downloads/ReShade_Setup_4.1.1.exe"
		echo "## allow download of ReShade sourcefiles:"
		echo "#DOWNLOAD_RESHADE=1"
		echo "## ReShade sourcefiles:"
		echo "RESHADESRCDIR=$STLCFGDIR/reshade"
		echo "RS_D3D47_64=d3dcompiler_47_64.dll"
		echo "RS_D3D47_32=d3dcompiler_47_32.dll"
		echo "RS_64=ReShade64.dll"
		echo "RS_32=ReShade32.dll"
		} >> "$STLRSCFG"
	fi

	exportCfgFile "$STLRSCFG"

	if [ "$DOWNLOAD_RESHADE" -eq 1 ]; then
# could be cleaner...
		writelog "$(date) - INFO - ${FUNCNAME[0]} - DOWNLOAD_RESHADE enabled"
		if [ -n "$RESHADESRCDIR" ]; then
			if [ ! -f "$RESHADESRCDIR/$RS_D3D47_32" ]; then
				writelog "$(date) - 404 - ${FUNCNAME[0]} - $RESHADESRCDIR/$RS_D3D47_32 missing - downloading"

				if [ ! -d "$RESHADESRCDIR" ]; then
					writelog "$(date) - 404 - ${FUNCNAME[0]} - $RESHADESRCDIR does not exist - trying to create it" 
					mkdir -p "$RESHADESRCDIR" >/dev/null 2>/dev/null
				fi

				if [ -d "$RESHADESRCDIR" ]; then
					writelog "$(date) - INFO - ${FUNCNAME[0]} - $RESHADESRCDIR exist - installing ReShade in here" 
					DLDST="$RESHADESRCDIR/d3dcompiler_47.zip"
					wget "$DL_D3D47_32" -O "$DLDST"
					unzip "$DLDST" -d "$RESHADESRCDIR"
					mv "$RESHADESRCDIR/d3dcompiler_47.dll" "$RESHADESRCDIR/$RS_D3D47_32"
				fi
			fi

			if [ ! -f "$RESHADESRCDIR/$RS_D3D47_64" ]; then
				writelog "$(date) - 404 - ${FUNCNAME[0]} - $RESHADESRCDIR/$RS_D3D47_64 missing - downloading" 
				wget "$DL_D3D47_64" -O "$RESHADESRCDIR/$RS_D3D47_64"
			fi

			if [ ! -f "$RESHADESRCDIR/$RS_64" ] || [ ! -f "$RESHADESRCDIR/$RS_32" ] ; then
				writelog "$(date) - 404 - ${FUNCNAME[0]} - $RESHADESRCDIR/$RS_64 and/or $RS_32 missing - downloading"
				DLDST="$RESHADESRCDIR/ReShade_Setup.exe"
				wget "$RSSETUP" -O "$DLDST"
				unzip "$DLDST" -d "$RESHADESRCDIR"
			fi
		fi
	fi
	
# make sure Depth3D is even wanted
	if [ "$RESHADE_DEPTH3D" -eq 1 ]; then
		writelog "$(date) - INFO - ${FUNCNAME[0]} - RESHADE_DEPTH3D enabled"
# and then only pull/clone it when CLONE_DEPTH3D is allowed 
		checkReShadeDepth3D # TODO
	fi	
}

function checkReShadeDepth3D {
	if [ "$CLONE_DEPTH3D" -eq 1 ]; then
		writelog "$(date) - INFO - ${FUNCNAME[0]} - CLONE_DEPTH3D enabled"
		if [ -n "$DEPTH3DSRCDIR" ]; then
			if [ -d "$DEPTH3DSRCDIR" ]; then
				cd "$DEPTH3DSRCDIR" || exit		# TODO get rid of all cds
				writelog "$(date) - INFO - ${FUNCNAME[0]} - pulling $DEPTH3DURL update in $PWD"
				LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" LD_PRELOAD="" git pull
				cd - || exit
			else
				if [ -n "$STLCFGDIR" ]; then
					if [ ! -d "$STLCFGDIR" ]; then
						writelog "$(date) - 404 - ${FUNCNAME[0]} - WARN - directory $STLCFGDIR does not exist - trying to create it"
						mkdir "$STLCFGDIR" >/dev/null 2>/dev/null
					fi

					if [ -d "$STLCFGDIR" ]; then
					cd "$STLCFGDIR" || exit
					writelog "$(date) - INFO - ${FUNCNAME[0]} - cloning $DEPTH3DURL in $PWD"
					LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" LD_PRELOAD="" git clone "$DEPTH3DURL"
					cd - || exit
					else
						writelog "$(date) - SKIP - ${FUNCNAME[0]} - ERROR - directory $STLCFGDIR still does not exist - skipping Depth3D update"
					fi
				else
					writelog "$(date) - SKIP - ${FUNCNAME[0]} - ERROR - variable STLCFGDIR is empty - skipping Depth3D update"
				fi
			fi
		else
			writelog "$(date) - SKIP - ${FUNCNAME[0]} - ERROR - variable DEPTH3DSRCDIR is empty - skipping Depth3D update"
		fi
	fi
}

# install reshade:
function installReshade {
	if [ "$INSTALL_RESHADE" -eq 1 ]; then

		prepareReshadeFiles

		writelog "$(date) - INFO - ${FUNCNAME[0]} - INSTALL_RESHADE enabled"
#32bit:
		if [ "$(LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" LD_PRELOAD="" file "$GP" | grep -c "PE32 ")" -eq 1 ]; then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - installing 32bit Reshade as $GE is 32bit" 

			if [ ! -f "$GFD/$RS_D3D47_DEST" ]; then
				if [ ! -f "$RESHADESRCDIR/$RS_D3D47_32" ]; then
					writelog "$(date) - SKIP - ${FUNCNAME[0]} - sourcefile $RESHADESRCDIR/$RS_D3D47_32 missing - skipping this file" 
				else
					cp "$RESHADESRCDIR/$RS_D3D47_32" "$GFD/$RS_D3D47_DEST" >/dev/null 2>/dev/null
					writelog "$(date) - INFO - ${FUNCNAME[0]} - copied $RESHADESRCDIR/$RS_D3D47_32 to $GFD/$RS_D3D47_DEST" 
				fi
			else
				writelog "$(date) - SKIP - ${FUNCNAME[0]} - destfile $GFD/$RS_D3D47_DEST already exists - skipping this file" 
			fi

#dxgi:
			if [ ! -f "$GFD/$RS_DX_DEST" ]; then
				if [ ! -f "$RESHADESRCDIR/$RS_32" ]; then
					writelog "$(date) - SKIP - ${FUNCNAME[0]} - sourcefile $RESHADESRCDIR/$RS_32 missing - skipping this file" 
				else
					cp "$RESHADESRCDIR/$RS_32" "$GFD/$RS_DX_DEST" >/dev/null 2>/dev/null
					writelog "$(date) - INFO - ${FUNCNAME[0]} - copied $RESHADESRCDIR/$RS_32 to $GFD/$RS_DX_DEST" 
				fi
			else
				writelog "$(date) - SKIP - ${FUNCNAME[0]} - destfile $GFD/$RS_DX_DEST already exists - skipping this file" 
			fi

#d3d9:
			if [ ! -f "$GFD/$RS_D9_DEST" ]; then
				if [ ! -f "$RESHADESRCDIR/$RS_32" ]; then
					writelog "$(date) - SKIP - ${FUNCNAME[0]} - sourcefile $RESHADESRCDIR/$RS_32 missing - skipping this file" 
				else
					cp "$RESHADESRCDIR/$RS_32" "$GFD/$RS_D9_DEST" >/dev/null 2>/dev/null
					writelog "$(date) - INFO - ${FUNCNAME[0]} - copied $RESHADESRCDIR/$RS_32 to $GFD/$RS_D9_DEST" 
				fi
			else
				writelog "$(date) - SKIP - ${FUNCNAME[0]} - destfile $GFD/$RS_D9_DEST already exists - skipping this file" 
			fi

# 64bit:
		elif  [ "$(LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" LD_PRELOAD="" file "$GP" | grep -c "PE32+ ")" -eq 1 ]; then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - installing 64bit Reshade as $GE is 64bit" 

			if [ ! -f "$GFD/$RS_D3D47_DEST" ]; then
				if [ ! -f "$RESHADESRCDIR/$RS_D3D47_64" ]; then
					writelog "$(date) - SKIP - ${FUNCNAME[0]} - sourcefile $RESHADESRCDIR/$RS_D3D47_64 missing - skipping this file" 
				else
					cp "$RESHADESRCDIR/$RS_D3D47_64" "$GFD/$RS_D3D47_DEST" >/dev/null 2>/dev/null
					writelog "$(date) - INFO - ${FUNCNAME[0]} - copied $RESHADESRCDIR/$RS_D3D47_64 to $GFD/$RS_D3D47_DEST" 
				fi
			else
				writelog "$(date) - SKIP - ${FUNCNAME[0]} - destfile $GFD/$RS_D3D47_DEST already exists - skipping this file" 
			fi

#dxgi:
			if [ ! -f "$GFD/$RS_DX_DEST" ]; then
				if [ ! -f "$RESHADESRCDIR/$RS_64" ]; then
					writelog "$(date) - SKIP - ${FUNCNAME[0]} - sourcefile $RESHADESRCDIR/$RS_64 missing - skipping this file" 
				else
					cp "$RESHADESRCDIR/$RS_64" "$GFD/$RS_DX_DEST" >/dev/null 2>/dev/null
					writelog "$(date) - INFO - ${FUNCNAME[0]} - copied $RESHADESRCDIR/$RS_64 to $GFD/$RS_DX_DEST" 
				fi
			else
				writelog "$(date) - SKIP - ${FUNCNAME[0]} - destfile $GFD/$RS_DX_DEST already exists - skipping this file" 
			fi
#d3d9:
			if [ ! -f "$GFD/$RS_D9_DEST" ]; then
				if [ ! -f "$RESHADESRCDIR/$RS_64" ]; then
					writelog "$(date) - SKIP - ${FUNCNAME[0]} - sourcefile $RESHADESRCDIR/$RS_64 missing - skipping this file" 
				else
					cp "$RESHADESRCDIR/$RS_64" "$GFD/$RS_D9_DEST" >/dev/null 2>/dev/null
					writelog "$(date) - INFO - ${FUNCNAME[0]} - copied $RESHADESRCDIR/$RS_64 to $GFD/$RS_D9_DEST" 
				fi
			else
				writelog "$(date) - SKIP - ${FUNCNAME[0]} - destfile $GFD/$RS_D9_DEST already exists - skipping this file" 
			fi
		else
				writelog "$(date) - SKIP - ${FUNCNAME[0]} - ERROR in ReShade installation - no file information detected from $GP - setting USERESHADE=0 for this session"
				export USERESHADE=0
		fi
	fi
}

function installReshadeDepth3D {
	if [ "$RESHADE_DEPTH3D" -eq 1 ]; then
		writelog "$(date) - INFO - ${FUNCNAME[0]} - copying shaders into gamedir"
		find "$DEPTH3DSRCDIR/Shaders/" -maxdepth 1 -name "*.fx*" | while read -r file; do
			writelog "$(date) - INFO - ${FUNCNAME[0]} - CHECKING $GFD/$(basename "$file")"

			if [ -f "$GFD"/"$(basename "$file")" ]; then
				writelog "$(date) - INFO - ${FUNCNAME[0]} - $GFD/$(basename "$file") already exists - updating"
				cp "$file" "$GFD"
			else
				writelog "$(date) - INFO - ${FUNCNAME[0]} - copying new file $file to $GFD"
				cp "$file" "$GFD"
			fi
		done
	fi	
}


function useReshade {
	if [ "$USERESHADE" -eq 1 ]; then
		if [ ! -f "$GFD/$RS_D3D47_DEST" ]; then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - looks like Reshade is not yet installed in $GFD - installing because USERESHADE is enabled"
			INSTALL_RESHADE=1 installReshade
		fi
		writelog "$(date) - INFO - ${FUNCNAME[0]} - setting WINEDLLOVERRIDES for ReShade: dxgi=n,b;d3d9=n,b;d3dcompiler_47=n,b"
		export WINEDLLOVERRIDES="dxgi=n,b;d3d9=n,b;d3dcompiler_47=n,b"
	fi	
}

#### RESHADE BLOCK END ####


#### CONFIG BLOCK START ####

function exportCfgFile {
	CFGFILE="$1"
	while read -r line; do
		if  grep -q -v "^#" <<< "$line"; then
			export "${line?}"
#		else
## unset all commented own variables - TODO: filter own variables, because global ones should not be unset
#			if grep "=" <<< "$line"; then
#			echo unset "$(awk -F '=' '{print $1}' <<< "$line" | sed "s:#::")" >> "/tmp/unet-$AID.txt"
#			unset "$(awk -F '=' '{print $1}' <<< "$line" | sed "s:#::")"
#			fi
		fi
	done < "$CFGFILE"
}

function PROTONVERSION {
	PROTONCMD="$(echo "$*" | awk -F ' waitforexitandrun' '{print $1}')"
	PROTONVERSION="$(dirname "$PROTONCMD")/version"
	awk '{print $2}' < "$PROTONVERSION"
}

function startEditor {

	KILLBROWSER=0

	writelog "$(date) - INFO - ${FUNCNAME[0]} - key pressed on launch - starting STLEDITOR $STLEDITOR with config STLGAMECFG $STLGAMECFG)"
	if [ "$PROTONDB" -eq 1 ]; then
		writelog "$(date) - INFO - ${FUNCNAME[0]} - PROTONDB is set to 1 - also opening the protondb url in the browser"
		if [ -x "$(command -v "$BROWSER" 2>/dev/null)" ]; then
		
			# if we open a new BROWSER instance here, we're going to kill it when the game launches, else the game won't "exit" in steam 
			if pgrep "$BROWSER" ; then
				KILLBROWSER=0
			else
				KILLBROWSER=1
			fi
		
			"$BROWSER" "$PDBURL/$AID" & 
		fi
	fi
	"$STLEDITOR" "$STLGAMECFG"
	if [ "$KILLBROWSER" -eq 1 ]; then
		pkill -9 "$BROWSER"
	fi
}

function editGameConfig {
# sourcing gameconfig, to optionally override global WAITEDITOR
	exportCfgFile "$STLGAMECFG"

# open editor requester 
	if [ "$WAITEDITOR" -gt 0 ]; then
		if [ -x "$(command -v "$STEAM_ZENITY" 2>/dev/null)" ]; then

			"$STEAM_ZENITY" --title="$PROGNAME-$PROGVERS" --question --text="start editor" --ok-label=edit --cancel-label=cancel --timeout="$WAITEDITOR"
			case $? in
				0) startEditor
				;;
				1) writelog "$(date) - INFO - ${FUNCNAME[0]} - key not pressed - starting game"
				;;
			esac
		else
			writelog "$(date) - SKIP - ${FUNCNAME[0]} - $STEAM_ZENITY not found"
		fi
	fi
}

# create project dir $1 if $2 is 1 or empty
function mkProjDir {
	if [ -n "$2" ]; then
		if [ "$2" -eq 1 ]; then
			if [ ! -d "$1" ]; then
				mkdir -p "$1" 2>/dev/null >/dev/null
			fi
		fi
	fi
}

# create project dirs
function createProjectDirs {
	mkProjDir "$LOGDIR" 1
	mkProjDir "$STLGAMEDIR" 1
	mkProjDir "$STLDXVKDIR" "$CREATESTLDXVKCFGTMPL"
	mkProjDir "$TWEAKDIR" "$CREATETWEAKS"
	mkProjDir "$TWEAKDIR" "$USETWEAKS"
	mkProjDir "$SBSTWEAKDIR" "$RUNSBSVR"
	mkProjDir "$RESHADESRCDIR" "$INSTALL_RESHADE"
}

# create the default global config if not found:
function createDefaultGlobalCfg {

	mkProjDir "$STLCFGDIR" 1

	if [ ! -f "$STLDEFGLOBALCFG" ]; then
		echo "default global config not found - creating it"
		{
		echo "## create an empty \$STLDXVKCFG_tmpl for easier editing when required"
		echo "CREATESTLDXVKCFGTMPL=0"
		echo "## the base strace path used to optionally dump strace logs"
		echo "STRACEDIR=/tmp/"
		echo "## default logfile dir"
		echo "LOGDIR=$LOGDIR"
		echo "## write logfile if enabled"
		echo "WRITELOG=1"
		echo "## texteditor to use for opening the gameconfig - f.e. with WAITEDITOR"
		echo "STLEDITOR=geany"
		echo "## wait WAITEDITOR seconds for a keypress to open the texteditor STLEDITOR with the game config"
		echo "WAITEDITOR=2"
		echo "## set PROTONDB to 1 to also open protondb.com for the game in your $BROWSER when starting the editor STLEDITOR:"
		echo "#PROTONDB=1"
		echo "## protondb base url - for optional PROTONDB"
		echo "PDBURL=https://www.protondb.com/app"
		echo "## Browser used for PROTONDB:"
		echo "BROWSER=firefox"
		echo "## vr-video-player"
		echo "## set to 1 to enable nyrna while game is running"
		echo "#RUN_NYRNA=1"
		echo "VRVIDEOPLAYER=vr-video-player"
		echo "## vr-video-player args"
		echo "VRVIDEOPLAYERARGS=--flat"
		echo "## tweaks are only useful if some people contribute gamespecific tweaks, else this will vanish:"
		echo "## set to 1 to override settings with tweaks when found "
		echo "#USETWEAKS=1"
		echo "## set to 1 create tweak config templates for the launched game if not found"
		echo "#CREATETWEAKS=1"
		echo "## seconds to wait to automatically save a new basic SBS tweak config of the running game with the gamewindow name after game launch - 0 to disable - 1 to pick a window"
		echo "#SAVESBSWINNAME=1"
		echo "## directory with global sbs-tweaks"
		echo "GLOBALSBSTWEAKDIR=/usr/share/$PROGCMD/sbs"
		echo "## directory with global tweaks"
		echo "GLOBALTWEAKDIR=/usr/share/$PROGCMD/tweaks"
		echo "##### SideBySide #####"
		echo "## Depth3D git project:"
		echo "DEPTH3DURL=https://github.com/BlueSkyDefender/Depth3D.git"
		echo "## allow git clone of Depth3D shaderfiles :"
		echo "#CLONE_DEPTH3D=1"
		echo "## Depth3D sourcefiles:"
		echo "DEPTH3DSRCDIR=$STLCFGDIR/Depth3D"
		} >> "$STLDEFGLOBALCFG"
	fi
}

# create the default cfg "$STLDEFGAMECFG" if not found:
function createDefaultGameCfg {
	if [ ! -f "$STLDEFGAMECFG" ]; then
		writelog "$(date) - 404 - ${FUNCNAME[0]} - default game template config $STLDEFGAMECFG not found - creating it"
		{
		echo "## set to 1 to override settings with tweaks when found - overrides USETWEAKS in global config"
		echo "#USETWEAKS=1"
		echo "## set to 1 to enable the custom command CUSTOMCMD:"
		echo "#RUN_CUSTOMCMD=1"
		echo "## start this custom command:"
		echo "#CUSTOMCMD=yourProgram"
		echo "## start CUSTOMCMD command with following args:"
		echo "#CUSTOMCMD_ARGS=--some --args"
		echo "## set to 1 to only start above CUSTOMCMD and not the game command itself:"
		echo "#ONLY_CUSTOMCMD=1"
		echo "## set to 1 to fork the custom CUSTOMCMD into the background and continue with starting %command%"
		echo "#FORK_CUSTOMCMD=0"
		echo "## additional game args, so you don't have to append them in steam after %command%:"
		echo "#GAMEARGS=--some --args"
		echo "## start game with gamemoderun:"
		echo "USEGAMEMODERUN=1"
		echo "## force 32bit pfx:"
		echo "#FORCE32BITPFX=1"
		echo "## use mangohud:"
		echo "#MANGOHUD=1"
		echo "## set to 1 to start the game with vkbasalt:"
		echo "#ENABLE_VKBASALT=1"
		echo "## set to 1 to enable nyrna while game is running - overrides global config"
		echo "#RUN_NYRNA=1"
		echo "## set radv mode:"
		echo "#RADV_PERFTEST=aco"
		echo "## comment in to use amdvlk"
		echo "#VK_ICD_FILENAMES=/usr/share/vulkan/icd.d/amd_icd32.json:/usr/share/vulkan/icd.d/amd_icd64.json"
		echo "## OR comment in to use vulkan-radeon"
		echo "#VK_ICD_FILENAMES=/usr/share/vulkan/icd.d/radeon_icd.i686.json:/usr/share/vulkan/icd.d/radeon_icd.x86_64.json"
		echo "## start winetricks gui before game launch:"
		echo "#RUN_WINETRICKS=1"
		echo "## install all packages in WINETRICKSPAKS silently with winetricks:"
		echo "#WINETRICKSPAKS=vcrun2015 xact"
		echo "## start winecfg before game launch:"
		echo "#RUN_WINECFG=1"
		echo "## set to 1 to enable virtualdesktop for the game"
		echo "#VIRTUALDESKTOP=1"
		echo "## set to 1 to install ReShade:"
		echo "#INSTALL_RESHADE=1"
		echo "## set to 1 to install ReShade Depth3D Shader into gamedir:"
		echo "#RESHADE_DEPTH3D=1"
		echo "## set to 1 to start game with ReShade enabled:"
		echo "#USERESHADE=1"
		echo "## set to 1 to start the game with VRVIDEOPLAYER in VR at once or to a greater value to delay SteamVR and SBS for RUNSBSVR seconds"
		echo "#RUNSBSVR=1"
		echo "## vr-video-player args - overriding global settings"
		echo "#VRVIDEOPLAYERARGS=--flat"
		echo "## vr-video-player zoom value"
		echo "#SBSZOOM="
		echo "## shortcut to enable all required flags for SBSVR with vkbasalt"
		echo "#SBSVRVK=1"
		echo "## shortcut to enable all required flags for SBSVR with ReShade"
		echo "#SBSVRRS=1"	
		echo "## optional name of the gamewindow for VRVIDEOPLAYER - works more stable and is faster:"
		echo "#VRGAMEWINDOW="
		echo "## overrides global WAITEDITOR config:"
		echo "#WAITEDITOR=0"
		echo "## overrides global PROTONDB config:"
		echo "#PROTONDB=1"
		echo "## notifier command:"
		echo "#NOTY=notify-send"
		echo "## proton vars:"
		echo "#PROTON_LOG=1"
		echo "#PROTON_DUMP_DEBUG_COMMANDS=1"
		echo "#PROTON_DEBUG_DIR=/tmp"
		echo "#PROTON_USE_WINED3D=1"
		echo "#PROTON_NO_D3D11=1"
		echo "#PROTON_NO_D3D10=1"
		echo "#PROTON_NO_ESYNC=1"
		echo "#PROTON_NO_FSYNC=1"
		echo "#PROTON_FORCE_LARGE_ADDRESS_AWARE=1"
		echo "#PROTON_OLD_GL_STRING=1"
		echo "#PROTON_USE_SECCOMP=1"
		echo "#PROTON_NO_WRITE_WATCH=1"
		echo "## dxvk vars - see https://github.com/doitsujin/dxvk"
		echo "#DXVK_HUD=1"
		echo "#DXVK_LOG_LEVEL=none|error|warn|info|debug Controls message logging."
		echo "#DXVK_LOG_PATH=/some/directory Changes path where log files are stored."
		echo "## wine vars:"
		echo "#WINE_FULLSCREEN_INTEGER_SCALING=0"
		echo "##strace settings:"
		echo "#STRACERUN=1"
		echo "#STRACEOPTS=-f -t -e trace=file"
		} >> "$STLDEFGAMECFG"
	fi
}

# create game configs:
function createGameCfg {
# MAIN GAME CONFIG STLDEFGAMECFG:

	if [ ! -f "$STLGAMECFG" ] ; then
		{
		echo "#########"
		echo "#$PROGNAME $PROGVERS"
		echo "#########"
		echo "#GAMENAME=$GN"
		echo "#GAMEEXE=$GE"
		echo "#GAMEID=$AID"
		echo "#########"
		echo "## set the default config file for DXVK_CONFIG_FILE which is used when found - defaults to config found in $STLDXVKDIR"
		echo "#STLDXVKCFG=$STLDXVKDIR/$AID.conf"
		echo "## vkbasalt config file:"
		echo "VKBASALT_CONFIG_FILE=$STLCFGDIR/vkBasalt.conf"
		cat "$STLDEFGAMECFG"
		} >> "$STLGAMECFG"
	fi

# DXVK CONFIG TEMPLATE:
# create "$STLDXVKCFG"_tmpl if CREATESTLDXVKCFGTMPL is set to 1
	if [ "$CREATESTLDXVKCFGTMPL" -eq 1 ]; then
		if [ ! -f "$STLDXVKCFG" ]; then
			touch "$STLDXVKCFG"_tmpl
		fi
	fi

# TWEAK CONFIG TEMPLATE:
	if [ "$CREATETWEAKS" -eq 1 ]; then
# write tweak header if tweakfile not found:			
		createProjectDirs

		if [ ! -f "$TWEAKCFG" ] ; then
			{
			echo "#########"
			echo "#GAMENAME=$GN"
			echo "#GAMEEXE=$GE"
			echo "#GAMEID=$AID"
			echo "#PROTONVERSION=$(PROTONVERSION "$@")"
			echo "#########"
			} >> "$TWEAKCFG"
		fi
	fi
}

function saveSBSWinName {
	if [ "$SAVESBSWINNAME" -gt 0 ]; then
		if [ -f "$SBSTWEAKDIR/$AID.conf" ]; then
			writelog "$(date) - SKIP - ${FUNCNAME[0]} - $SBSTWEAKDIR/$AID.conf does already exist - skipping"
		else
		if [ "$SAVESBSWINNAME" -eq 1 ]; then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - SAVESBSWINNAME is 1 so picking the window"
			NEWVRGAMEWINDOW=$(xdotool selectwindow getwindowname)
		else
			writelog "$(date) - WAIT - ${FUNCNAME[0]} - waiting $SAVESBSWINNAME seconds to get the windowname"
			NEWVRGAMEWINDOW=$(sleep "$SAVESBSWINNAME"; xdotool getactivewindow getwindowname)	
		fi
			if [ -n "$NEWVRGAMEWINDOW" ]; then
				{
					echo "#########"
					echo "#GAMENAME=$GN"
					echo "#GAMEEXE=$GE"
					echo "#GAMEID=$AID"
					echo "#PROTONVERSION=$(PROTONVERSION "$@")"
					echo "#########"
					echo "VRGAMEWINDOW=\"$NEWVRGAMEWINDOW\""
				} >> "$SBSTWEAKDIR/$AID.conf"
				writelog "$(date) - INFO - ${FUNCNAME[0]} - created config $SBSTWEAKDIR/$AID.conf with windowname $NEWVRGAMEWINDOW"
			else
				writelog "$(date) - SKIP - ${FUNCNAME[0]} - found windowname $NEWVRGAMEWINDOW is invalid"
			fi
		fi
	fi
}

# override game configs with a tweak config if available:
function checkTweakLaunch {
	if [ "$USETWEAKS" -eq 1 ]; then
		writelog "$(date) - INFO - ${FUNCNAME[0]} - tweaks enabled"

# first try global config
		if [ -f "$GLOBALTWEAKDIR/$AID.conf" ]; then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - using overrides found in $GLOBALTWEAKDIR/$AID.conf"
			while read -r line; do
				if  echo "$line" | grep -v "^#"; then
					export "${line?}"
				fi
			done < "$GLOBALTWEAKDIR/$AID.conf"
		fi

# then user config - (overriding the global one)
		if [ -f "$TWEAKDIR/$AID.conf" ]; then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - using overrides found in $TWEAKDIR/$AID.conf"
			while read -r line; do
				if  echo "$line" | grep -v "^#"; then
					export "${line?}"
				fi
			done < "$TWEAKDIR/$AID.conf"
		fi
	fi
}

function createDefaultCfgs {
	createDefaultGlobalCfg

	if [ -f "$STLDEFGLOBALCFG" ]; then
		exportCfgFile "$STLDEFGLOBALCFG"
	fi

	createProjectDirs
	createDefaultGameCfg
}

# updates or creates option $1 with value $2 in configfile $3:
function updateConfigEntry {
	CFGOPTION="$1"	# VARIABLENAME=(${!VARIABLE@})
	CFGVALUE="$2"
	CFGFILE="$3"

	if [ ! -f "$CFGFILE" ]; then
		writelog "$(date) - SKIP - ${FUNCNAME[0]} - configfile $CFGFILE does not exist - skipping config update"
	else
		if [ -n "$CFGVALUE" ]; then
				if [ "$(grep -c "#$CFGOPTION" "$CFGFILE")" -eq 1 ]; then
					writelog "$(date) - INFO - ${FUNCNAME[0]} - option $CFGOPTION commented out in config - activating it with the new value $CFGVALUE"
					sed -i "/#$CFGOPTION/c$CFGOPTION=$CFGVALUE" "$CFGFILE"
				elif [ "$(grep -c "$CFGOPTION" "$CFGFILE")" -eq 0 ]; then
					writelog "$(date) - INFO - ${FUNCNAME[0]} - $CFGOPTION option missing in config - adding a new line"
					echo "$CFGOPTION=$CFGVALUE" >> "$CFGFILE"
				else
					writelog "$(date) - INFO - ${FUNCNAME[0]} - option $CFGOPTION is updated with the new value $CFGVALUE"
					sed -i "/$CFGOPTION/c$CFGOPTION=$CFGVALUE" "$CFGFILE"
				fi
		else
			writelog "$(date) - SKIP - ${FUNCNAME[0]} - value $CFGVALUE is empty - skipping config update"
		fi
	fi
}

##### CONFIG BLOCK END #####

### LOG START ###

function writelog {
	if [ "$WRITELOG" -eq 1 ]; then
		echo "$1" >> "$LOGDIR/$AID.log"
	fi
}

### LOG END ###

### STRACE START ###

function stracerun {
	writelog "$(date) - INFO - ${FUNCNAME[0]} - starting stracerun"

	while ! pgrep "$GE" ; do
		writelog "$(date) - WAIT - ${FUNCNAME[0]} - waiting for process $GE"
	done
	writelog "$(date) - INFO - ${FUNCNAME[0]} - process $GE found at $(pgrep "$GE")"
	writelog "$(date) - INFO - ${FUNCNAME[0]} - strace -p $(pgrep "$GE") $STRACEOPTS -o $STRACEDIR/$AID.log"
	IFS=" " read -r -a RUNSTRACEOPTS <<< "$STRACEOPTS"
	strace -p "$(pgrep "$GE")" "${RUNSTRACEOPTS[@]}" -o "$STRACEDIR/$AID.log"
}

function checkStraceLaunch {
	if [ "$STRACERUN" -eq 1 ]; then
		stracerun &
	fi
}

### STRACE END ###


### CUSTOM PROGRAM START ###

function launchCustomProg {
	if [ -z "$CUSTOMCMD_ARGS" ]; then
		writelog "$(date) - INFO - ${FUNCNAME[0]} - starting the custom program $CUSTOMCMD without args"
	else
		writelog "$(date) - INFO - ${FUNCNAME[0]} - starting the custom program $CUSTOMCMD with args: $CUSTOMCMD_ARGS"
	fi
	
	if  [ -x "$(command -v "$CUSTOMCMD" 2>/dev/null)" ]; then
		writelog "$(date) - INFO - ${FUNCNAME[0]} - $CUSTOMCMD found in $PATH"
		LACO="$CUSTOMCMD"
		CUSTCOM="$(which "$CUSTOMCMD")"
	else
		writelog "$(date) - INFO - ${FUNCNAME[0]} - $CUSTOMCMD not in path - searching in gamedir"

		if [ -f "$GFD/$CUSTOMCMD" ]; then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - $CUSTOMCMD was found in gamedir $GFD"
			LACO="$GFD/$CUSTOMCMD"
			CUSTCOM="$GFD/$CUSTOMCMD"
		else
			writelog "$(date) - INFO - ${FUNCNAME[0]} - $CUSTOMCMD also not in $GFD/$CUSTOMCMD - checking if absolute path was provided"

			if [ -f "$CUSTOMCMD" ]; then
				writelog "$(date) - INFO - ${FUNCNAME[0]} - $CUSTOMCMD is absolute path"
				LACO="$CUSTOMCMD"
				CUSTCOM="$CUSTOMCMD"
			else
				writelog "$(date) - SKIP - ${FUNCNAME[0]} - ERROR - custom command CUSTOMCMD $CUSTOMCMD not found - skipping launch"
				if [ "$ONLY_CUSTOMCMD" -eq 1 ]; then
					writelog "$(date) - SKIP - ${FUNCNAME[0]} - as ONLY_CUSTOMCMD is enabled we're bailing out here"
					exit
				fi
			fi
		fi
	fi

	if [ -z "$LACO" ]; then
		writelog "$(date) - SKIP - ${FUNCNAME[0]} - ERROR - launch command $LACO empty- skipping launch"
	else
		IFS=" " read -r -a RUNCUSTOMCMD_ARGS <<< "$CUSTOMCMD_ARGS"
		writelog "$(date) - INFO - ${FUNCNAME[0]} - launching custom command with $LACO $CUSTOMCMD_ARGS"
# several variables coming from steam have to be cleaned in order to get wine to work here
		if [ "$(LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" LD_PRELOAD="" file "$CUSTCOM" | grep -c "PE32")" -eq 1 ]; then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - $CUSTCOM seems to be a MS Windows exe - starting through proton"
			CUSTOM_PROTON="$(echo "$*" | awk -F 'waitforexitandrun' '{print $1}')"
			LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" LD_PRELOAD="" WINEDEBUG="-all" WINEPREFIX="$STEAM_COMPAT_DATA_PATH/pfx" "$(dirname "$CUSTOM_PROTON")/dist/bin/wine" "$LACO" "${RUNCUSTOMCMD_ARGS[@]}"
		else
			writelog "$(date) - INFO - ${FUNCNAME[0]} - $CUSTCOM doesn't seem to be a MS Windows exe - regular start (without further analysing)"
			$LACO "${RUNCUSTOMCMD_ARGS[@]}"
		fi
	fi

}

function checkCustomLaunch {
	# start a custom program:
	if [ "$RUN_CUSTOMCMD" -eq 1 ] ; then
		writelog "$(date) - INFO - ${FUNCNAME[0]} - RUN_CUSTOMCMD is set to 1 - trying to start custom program CUSTOMCMD"
	# fork in background and continue
		if [ "$FORK_CUSTOMCMD" -eq 1 ]; then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - FORK_CUSTOMCMD is set to 1 -  forking the custom program in background and continue"
			launchCustomProg "$@" &
	# or wait
		else
			writelog "$(date) - INFO - ${FUNCNAME[0]} - FORK_CUSTOMCMD is set to 0 - starting the custom program regularly"
			launchCustomProg "$@"
		fi


		if [ "$ONLY_CUSTOMCMD" -eq 1 ]; then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - ONLY_CUSTOMCMD is set to 1 means only custom program $CUSTOMCMD is supposed to start - exiting here"
			writelog "$(date) - INFO - ######### STOP EARLY $PROGNAME $PROGVERS #########"
			exit
		fi
	else
		if [ -n "$CUSTOMCMD" ]; then
			writelog "$(date) - SKIP - ${FUNCNAME[0]} - RUN_CUSTOMCMD is set to 0 therefore skipping the custom program $CUSTOMCMD"
		fi
	fi
}

### CUSTOM PROGRAM END ###


### WINE START ###

function createW32PFX {
	WPFX="$1"
	LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" LD_PRELOAD="" WINEARCH=win32 WINEPREFIX="$WPFX" winecfg
}

# force 32bit pfx if FORCE32BITPFX is set

function check32BitForce {
	if [ "$FORCE32BITPFX" -eq 1 ]; then
		writelog "$(date) - INFO - ${FUNCNAME[0]} - forcing 32bit prefix"
		WPFX="$STEAM_COMPAT_DATA_PATH/pfx"
		if [ -d "$WPFX" ];then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - wineprefix $WPFX exists - checking architecture"
			if [ -f "$WPFX/drive_c/windows/syswow64/avifile.dll" ];then	# the dir alone is not enough as proton installs dxvk dlls into this dir, so looking for a random file from a clean win64 pfx
				PFXBACK64="$WPFX"-BACK64
				writelog "$(date) - INFO - ${FUNCNAME[0]} - wineprefix $WPFX is 64bit - creating a 32bit prefix instead"
				if [ ! -d "$PFXBACK64" ];then
					mv "$WPFX" "$PFXBACK64"
					writelog "$(date) - INFO - ${FUNCNAME[0]} - backed the 64bit pfx $WPFX to $PFXBACK64 - creating a 32bit prefix now"
					createW32PFX "$WPFX"
					mkdir "$WPFX"/drive_c/windows/syswow64
					writelog "$(date) - INFO - ${FUNCNAME[0]} - 32bit wineprefix $WPFX created"
				else
					writelog "$(date) - SKIP - ${FUNCNAME[0]} - 64bit backup $PFXBACK64 already exists - please remove it manually if n longer required! - skipping FORCE32BITPFX"
					FORCE32BITPFX=0
				fi
			else
				writelog "$(date) - SKIP - ${FUNCNAME[0]} - wineprefix $WPFX already is 32bit - nothing to do"
			fi
		else
			writelog "$(date) - INFO - ${FUNCNAME[0]} - wineprefix $WPFX does not exist - creating a fresh 32bit prefix"
			createW32PFX "$WPFX"
		fi
	fi
}

# start winetricks before game launch:
function checkWinetricksLaunch {
# gui:
	if [ "$RUN_WINETRICKS" -eq 1 ]; then
		if  [ -x "$(command -v "winetricks" 2>/dev/null)" ]; then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - launching winetricks before game start with following commandline:"
			# several variables coming from steam have to be cleaned in order to get wine to work here
			if [ "$FORCE32BITPFX" -eq 1 ]; then
				writelog "$(date) - INFO - ${FUNCNAME[0]} - LC_ALL=\"\" PATH=\"/usr/local/bin:/usr/bin\" LD_LIBRARY_PATH=\"\" LD_PRELOAD=\"\" WINEARCH=win32 WINEPREFIX=\"$STEAM_COMPAT_DATA_PATH/pfx\" winetricks --gui"
				mv "$WPFX/drive_c/windows/syswow64" "$WPFX/drive_c/windows/syswow64-off"
				LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" LD_PRELOAD="" WINEARCH=win32 WINEPREFIX="$STEAM_COMPAT_DATA_PATH/pfx" winetricks --gui
				mv "$WPFX/drive_c/windows/syswow64-off" "$WPFX/drive_c/windows/syswow64"
			else
				writelog "$(date) - INFO - ${FUNCNAME[0]} - LC_ALL=\"\" PATH=\"/usr/local/bin:/usr/bin\" LD_LIBRARY_PATH=\"\" LD_PRELOAD=\"\" WINEPREFIX=\"$STEAM_COMPAT_DATA_PATH/pfx\" winetricks --gui"
				LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" LD_PRELOAD="" WINEPREFIX="$STEAM_COMPAT_DATA_PATH/pfx" winetricks --gui
			fi
		else
			writelog "$(date) - SKIP - ${FUNCNAME[0]} - winetricks not found - skipping"
		fi
	fi
# silent
	if [ -n "$WINETRICKSPAKS" ]; then
		if  [ -x "$(command -v "winetricks" 2>/dev/null)" ]; then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - installing $WINETRICKSPAKS silently with winetricks"
			IFS=" " read -r -a INSTWINETRICKSPAKS <<< "$WINETRICKSPAKS"
			LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" LD_PRELOAD="" WINEPREFIX="$STEAM_COMPAT_DATA_PATH/pfx" winetricks "${INSTWINETRICKSPAKS[@]}" -q
		else
			writelog "$(date) - SKIP - ${FUNCNAME[0]} - winetricks not found - skipping"
		fi
	fi
}

# start winecfg before game launch:
function checkWineCfgLaunch {
	if [ "$RUN_WINECFG" -eq 1 ]; then
		if  [ -x "$(command -v "winecfg" 2>/dev/null)" ]; then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - starting winecfg before game start:"
			# several variables coming from steam have to be cleaned in order to get wine to work here
			if [ "$FORCE32BITPFX" -eq 1 ]; then
				writelog "$(date) - INFO - ${FUNCNAME[0]} - LC_ALL=\"\" PATH=\"/usr/local/bin:/usr/bin\" LD_LIBRARY_PATH=\"\" LD_PRELOAD=\"\" WINEARCH=win32 WINEPREFIX=\"$STEAM_COMPAT_DATA_PATH/pfx\" winecfg"
				mv "$WPFX/drive_c/windows/syswow64" "$WPFX/drive_c/windows/syswow64-off"
				LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" LD_PRELOAD="" WINEARCH=win32 WINEPREFIX="$STEAM_COMPAT_DATA_PATH/pfx" winecfg
				mv "$WPFX/drive_c/windows/syswow64-off" "$WPFX/drive_c/windows/syswow64"
			else
				writelog "$(date) - INFO - ${FUNCNAME[0]} - LC_ALL=\"\" PATH=\"/usr/local/bin:/usr/bin\" LD_LIBRARY_PATH=\"\" LD_PRELOAD=\"\" WINEPREFIX=\"$STEAM_COMPAT_DATA_PATH/pfx\" winecfg"
				LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" LD_PRELOAD="" WINEPREFIX="$STEAM_COMPAT_DATA_PATH/pfx" winecfg
			fi
		else
			writelog "$(date) - SKIP - ${FUNCNAME[0]} - winecfg not found - skipping"
		fi
	fi
}

function customRegs {
	if [ "$VIRTUALDESKTOP" -eq 1 ]; then
		TEMPREG="/tmp/temp.reg"
		if [ -f "$TEMPREG" ]; then
			rm "$TEMPREG"
		fi

		if touch "$TEMPREG"; then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - VIRTUALDESKTOP is set to 1 - enabling virtual desktop"
			{
			echo "Windows Registry Editor Version 5.00"
			echo "[HKEY_CURRENT_USER\Software\Wine\Explorer]"
			echo "\"Desktop\"=\"Default\""
			echo "[HKEY_CURRENT_USER\Software\Wine\Explorer\Desktops]"
			echo "\"Default\"=\"$(xrandr | grep "\*" | awk '{print $1}')\""
			} >> "$TEMPREG"

			LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" LD_PRELOAD="" WINEPREFIX="$STEAM_COMPAT_DATA_PATH/pfx" regedit "$TEMPREG"

			if [ -f "$TEMPREG" ]; then
				rm "$TEMPREG"
			fi

		else
			writelog "$(date) - SKIP - ${FUNCNAME[0]} - could not create $TEMPREG - skipping!"
		fi
	fi
}

function useNyrna {
	if [ "$RUN_NYRNA" -eq 1 ]; then
		NYRNA="nyrna"
		if  [ -x "$(command -v "$NYRNA" 2>/dev/null)" ]; then
			if pgrep "$NYRNA" ; then
				writelog "$(date) - SKIP - ${FUNCNAME[0]} - $NYRNA already running - skipping"
				RUN_NYRNA=0
			else
			writelog "$(date) - INFO - ${FUNCNAME[0]} - starting $NYRNA"
			"$NYRNA" &
			fi
		else
			writelog "$(date) - SKIP - ${FUNCNAME[0]} - $NYRNA not found"
		fi
	fi
}

### WINE END ###


### CORE LAUNCH START ###

## launchSteamProtonGame:
function launchSteamProtonGame {

	createDefaultCfgs

	writelog "$(date) - ######### START $PROGNAME $PROGVERS #########"
	writelog "$(date) - INFO - ${FUNCNAME[0]} - $PROGNAME - game launch args $*"
	
	createGameCfg "$@"

	editGameConfig

# we already created  ProjectDirs in createDefaultCfgs but in case a path was changed, we retry here
	createProjectDirs

# export game specific variables, exports die with this script, so no worries:
	writelog "$(date) - INFO - ${FUNCNAME[0]} - exporting game specific variables"
	exportCfgFile "$STLGAMECFG"

# export DXVK_CONFIG_FILE if STLDXVKCFG was found:
	if [ -f "$STLDXVKCFG" ]; then
		export DXVK_CONFIG_FILE="$STLDXVKCFG"
	fi

# shortcut to enable all required flags for SBSVR with vkbasalt
	if [ "$SBSVRVK" -eq 1 ]; then
		writelog "$(date) - INFO - $PROGNAME - SBSVRVK enabled - starting game in SBS-VR using vkbasalt"
		export RUNSBSVR=1
#		export RESHADE_DEPTH3D=1
		export ENABLE_VKBASALT=1
		export SBSVRRS=0
		export USERESHADE=0
	fi
	
# shortcut to enable all required flags for SBSVR with ReShade
	if [ "$SBSVRRS" -eq 1 ]; then
		writelog "$(date) - INFO - $PROGNAME - SBSVRVK enabled - starting game in SBS-VR using ReShade"
		export RUNSBSVR=1
		export INSTALL_RESHADE=1
		export RESHADE_DEPTH3D=1
		export USERESHADE=1
		export SBSVRVK=0
		export ENABLE_VKBASALT=0
	fi

# notifier:
	if  [ -x "$(command -v "$NOTY" 2>/dev/null)" ]; then
		"$NOTY" "Steam Tinker Launch started"
	fi

#################
# force 32bit pfx if  if FORCE32BITPFX is 1
	check32BitForce "$@"
	
# start winetricks gui if RUN_WINETRICKS is 1 or silently if WINETRICKSPAKS is not empty
	checkWinetricksLaunch

# start winecfg if RUN_WINECFG is 1
	checkWineCfgLaunch

# apply some regs if requested
	customRegs

# install ReShade if INSTALL_RESHADE is 1
	installReshade "$@"

# install Depth3D Shader if RESHADE_DEPTH3D is 1
	installReshadeDepth3D

# start game wih Reshade if USERESHADE is 1
	useReshade

# start game wih usevkBasalt ENABLE_VKBASALT is 1
	usevkBasalt

# start nyrna if RUN_NYRNA is 1
	useNyrna
	
# override tweak settings if USETWEAKS is 1
	checkTweakLaunch

# save game window name after SAVESBSWINNAME seconds
	saveSBSWinName "$@" &

# start game with side-by-side VR if RUNSBSVR is not 0 
	checkSBSVRLaunch

# start a custom program if RUN_CUSTOMCMD is 1
	checkCustomLaunch "$@"

# start strace process in the background if STRACERUN is 1
	checkStraceLaunch

########################

# the actual game launch - either with or without gamemoderun:
	IFS=" " read -r -a RUNGAMEARGS <<< "$GAMEARGS"
	PROTONCMD=("${@}" "${RUNGAMEARGS[@]}")

	writelog "$(date) - INFO - ${FUNCNAME[0]} - ${PROTONCMD[*]}"

	if [ "$USEGAMEMODERUN" -eq 1 ]; then
		writelog "$(date) - INFO - ${FUNCNAME[0]} - starting $GAMENAME ($AID) with Proton: $(PROTONVERSION "$@") with gamemoderun"
		gamemoderun "${PROTONCMD[@]}"
	else
		writelog "$(date) - INFO - ${FUNCNAME[0]} - starting $GAMENAME ($AID) with Proton: $(PROTONVERSION "$@")"
		"${PROTONCMD[@]}"
	fi
	writelog "$(date) - STOP - ######### STOP $PROGNAME $PROGVERS #########"
}

### CORE LAUNCH END ###

### CLOSE STL START ###

function closeSTL {
	writelog "$(date) - INFO - ${FUNCNAME[0]} - game $GAMENAME ($AID) exited - cleaning up custom processes if necessary"

# kill $VRVIDEOPLAYER in case it wasn't closed before
	if [ "$RUNSBSVR" -ge 1 ]; then
		if pgrep "$VRVIDEOPLAYER" ; then
			pkill -9 "$VRVIDEOPLAYER" 
		fi
	fi

# kill nyrna if running
	if [ "$RUN_NYRNA" -eq 1 ]; then
		NYRNA="nyrna"
		if pgrep "$NYRNA" ; then
			pkill -9 "$NYRNA" 
		fi
	fi

# should not be necessary, but in case a game forks and partly hangs this could help to gracefully exit wine. if you have doubts feel free to open an issue:
	WINEPREFIX="$STEAM_COMPAT_DATA_PATH/pfx" wineserver -k
	pkill -9 "$PROGCMD" # wip - if the game quit this script should as well, but in theory it could still wait for something with a user defined duration (f.e. SAVESBSWINNAME)
	writelog "$(date) - OK - ${FUNCNAME[0]} - finished"
}

### CLOSE STL END ###

# main:#################

if [ -z "$1" ]; then
	echo "no arguments provided - you probably didn't launch this via steam command line arguments"
	createDefaultCfgs
	howto
else
	if echo "$@" | grep "waitforexitandrun"; then
		launchSteamProtonGame "$@"
echo		closeSTL
		writelog "$(date) - ######### STOP $PROGNAME $PROGVERS #########"
	else
		echo "$@"
		echo "doesn't contain waitforexitandrun - this doesn't look like a steam proton launch command"
		createDefaultCfgs
		howto
	fi
fi
