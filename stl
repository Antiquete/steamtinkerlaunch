#!/bin/bash
# shellcheck source=/dev/null
# shellcheck disable=SC2154		# we work with steam variables here which are unknown to shellcheck

### project ###

PROGNAME="SteamTinkerLaunch"
PROGVERS="v1.0.4"
PROGCMD="$(basename "$0")"
PROJECTPAGE="https://github.com/frostworx/steamtinkerlaunch"

### (optionally) used programs ###

GAMEMODERUN="gamemoderun"
GIT="git"
NYRNA="nyrna"
STEAM="steam"
STRACE="strace"
UNZIP="unzip"
WGET="wget"
WINECFG="winecfg"
WINETRICKS="winetricks"
WMCTRL="wmctrl"
XDO="xdotool"
XWININFO="xwininfo"
REPLAY="replay-sorcery"

### howto ###

function howto {
	echo "========================="
	echo "$PROGNAME $PROGVERS"
	echo "========================="
	echo "  general usage:"
	echo "-----------------------"
	echo "  Just add this program to your steam game command line like:"
	echo "  'stl %command%'"
	echo ""
	echo "  game specific use:"
	echo "-----------------------"
	echo "  When starting a game with $PROGCMD it will check if a config file exists in $STLGAMEDIR/$SteamAppId.conf for the game"
	echo "  if it is not available it is created from the default config file (which is automatically created if not found)."
	echo "  $PROGCMD also has a global configfile $STLDEFGLOBALCFG, all settings configured in here are initialized at first and therefore are default for all games,"
	echo "  and will only be overridden, if the game specific config $STLGAMEDIR/$SteamAppId.conf has an other value"
	echo ""
	echo "  When starting the game a small requester will popup (default 2 seconds)."
	echo "  When you want to change settings for that game press space to open the game configuration and adjust it to your needs."
	echo "  The game start will wait until you're done and your changes are used on the fly."
	echo "  for more functions please check the configs and or the README - if something is not clear please file a bugreport on the projectpage $PROJECTPAGE"
	echo ""
	echo "  you can also change settings via commandline with"
	echo "  'stl set ENTRY ($SteamAppId or 'all') VALUE'"
	echo "  example:"
	echo "  'stl set PROTON_DEBUG_DIR_FILE 1232570 /random/path/'"
	echo "  will set PROTON_DEBUG_DIR for the game 1232570 to /random/path/ if the game has a config file in $STLGAMEDIR"
	echo "  'stl set RUN_REPLAY all 1'"
	echo "  will enable RUN_REPLAY in all game config files found in $STLGAMEDIR"
}

### default vars ###

if [ -z "$SteamAppId" ];then
	AID="$PROGCMD"
else
	AID="$SteamAppId"
fi

if [ -z "$XDG_CONFIG_HOME" ]; then
	STLCFGDIR="$HOME/.config/$PROGCMD"														# either hardcoded config dir
else
	STLCFGDIR="$XDG_CONFIG_HOME/$PROGCMD"													# or in XDG_CONFIG_HOME if the user set the variable
fi

STLDEFGLOBALCFG="$STLCFGDIR/global.conf"													# global config
STLDEFGAMECFG="$STLCFGDIR/default_template.conf"											# the default config template used to create new per game configs - will be autocreated if not found
LOGDIR="$STLCFGDIR/logs"																	# default logfile dir
STLGAMEDIR="$STLCFGDIR/gamecfgs"															# default basedir for game the gamespecific configs
STLGAMECFG="$STLGAMEDIR/$AID.conf"															# the game specific config file which is used by the launched game - created from $STLDEFGAMECFG if not found
STLCATEGORYDIR="$STLCFGDIR/categories"														# the directory holding config files with preconfigured settings for games in specific steamcategories
STLREGDIR="$STLCFGDIR/regs"																	# the directory holding registry files, either as $AID.reg or called with REGEDIT
SBSTWEAKDIR="$STLCFGDIR/sbs"																# directory for optional config overrides for easier side-by-side VR gaming
TWEAKDIR="$STLCFGDIR/tweaks"																# directory for optional config overrides for easier general VR gaming
TWEAKCFG="$TWEAKDIR/$AID.conf"																# the game specific shareable config tweak overrides - header autocreated if global CREATETWEAKS is set to 1
STLDXVKDIR="$STLCFGDIR/dxvk"																# base dxvk config dir from where default per game configs are automatically parsed
GP="$(awk -F 'waitforexitandrun ' '{print $NF}' <<< "$@" | awk -F ' GID=' '{print $1}' | awk -F '.exe' '{print $1".exe"}')"	# the absolute game path of the windows game exe - dirty hack to remove command line parameters
GE="$(basename "$GP" | awk -F '.exe' '{print $1}')"											# just the windows game exe name - will be used as game identifier, as we don't have the steamid here :(
GFD="$(dirname "$GP")"																		# the absolute directory where the game exe lives - unused for optional custom program
GN="$(awk -F '/' '{print $1}' <<< "$(awk -F 'common/' '{print $2}' <<< "$PWD")")"			# this is hopefully the proper game name
GWIDFILE="/tmp/stl-sbsgwid"																	# temp file holding the game window id - worksforme
SETUPDXVK="setup_dxvk"																		# required for optional 32bit WINEPREFIX creation
TWEAKWIN=""																					# variable only used by a handful games which require forced tweaks to start

#### VKBASALT BLOCK START ####

function usevkBasalt {
SBSSHADERDIR="Depth3D/Shaders"
SBSSHADER="$SBSSHADERDIR/SuperDepth3D_VR.fx"
	if [ -n "$ENABLE_VKBASALT" ] ; then
		if [ "$ENABLE_VKBASALT" -eq 1 ] ; then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - vkBasalt enabled"
			if [ ! -f "$VKBASALT_CONFIG_FILE" ]; then
				writelog "$(date) - INFO - ${FUNCNAME[0]} - creating default VKBASALT_CONFIG_FILE $VKBASALT_CONFIG_FILE"
				{
				echo "effects = reshade"
				echo "reshadeIncludePath = $STLCFGDIR/$SBSSHADERDIR"
				echo "reshade = $STLCFGDIR/$SBSSHADER"
				} >> "$VKBASALT_CONFIG_FILE"
			else
				writelog "$(date) - SKIP - ${FUNCNAME[0]} - default VKBASALT_CONFIG_FILE $VKBASALT_CONFIG_FILE already exists"
			fi
			
			if [ ! -f "$STLCFGDIR/$SBSSHADER" ]; then
				writelog "$(date) - 404 - ${FUNCNAME[0]} - Depth3D shader $STLCFGDIR/$SBSSHADER not found"
				if [ "$CLONE_DEPTH3D" -eq 1 ]; then
					writelog "$(date) - INFO - ${FUNCNAME[0]} - CLONE_DEPTH3D is enabled so checking it out"
					checkReShadeDepth3D
				else
					writelog "$(date) - SKIP - ${FUNCNAME[0]} - CLONE_DEPTH3D skipping the installation"
					export ENABLE_VKBASALT=0
				fi
			else
				writelog "$(date) - OK - ${FUNCNAME[0]} - looks like Depth3D shader is ready at $STLCFGDIR/$SBSSHADER"
			fi
		fi
	fi
}

#### VKBASALT BLOCK END ####

#### SBS VR BLOCK START ####

SBSVRWINNAME="vr-video-player"
STEAMVRARGS=(-applaunch 250820)

# returns the windowid of the biggest window of $GE:) 
function VRAUTOWINDOWID {
	MAXSIZ=0
	MAXWIN=0
	while read -r WINS; do
		WSIZ=$(($("$XWININFO" -id "$WINS" -stats | awk '$1=="-geometry" {print $2}' | awk -F '+'  '{print $1}' | sed "s:x:\*:")))
		if [ "$WSIZ" -gt "$MAXSIZ" ]; then
			MAXSIZ=$WSIZ
			MAXWIN=$WINS
		fi
	done <<< "$("$XDO" search --pid "$(GAMEPID)")"
	printf 0x%x'\n' "$MAXWIN"
}

function SBSstartSVR {
	SVRJUSTSTARTED=0
	
	writelog "$(date) - INFO - ${FUNCNAME[0]} - -------- starting SBS-VR --------"

	if [ "$(pgrep "" -a | grep -v grep | grep "/vrcompositor" -c)" -eq 0 ] ; then
		writelog "$(date) - INFO - ${FUNCNAME[0]} - vrcompositor not running, so starting SteamVR now:"
		if ! "$STEAM" "${STEAMVRARGS[@]}" 2>/dev/null >/dev/null ; then
			writelog "$(date) - SKIP - ${FUNCNAME[0]} - starting SteamVR FAILED - skipping SBS-VR"
			export RUNSBSVR=0
		else
			writelog "$(date) - OK - ${FUNCNAME[0]} - started SteamVR"
			SVRJUSTSTARTED=1
		fi
	fi

	
	if [ "$(pgrep "" -a | grep -v grep | grep "/vrstartup" -c)" -eq 0 ] ; then
		writelog "$(date) - INFO - ${FUNCNAME[0]} - no vrstartup process running"
	else
		if [ "$SVRJUSTSTARTED" -eq 1 ]; then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - SteamVR initializing"
			while true; do
				writelog "$(date) - INFO - ${FUNCNAME[0]} - waiting for end of vrstartup"	# TIMEOUT doesn't seem to be required for now
				if [ "$(pgrep "" -a | grep -v grep | grep "/vrstartup" -c)" -eq 0 ] ; then
					break
				fi
			done
		else
			writelog "$(date) - SKIP - ${FUNCNAME[0]} - vrstartup found, but we didn't start steamvr before! - skipping SBS-VR - just in case"
			export RUNSBSVR=0
		fi
	fi

	if [ "$SVRJUSTSTARTED" -eq 1 ]; then
		while true; do
			if [ "$(pgrep "" -a | grep -v grep | grep "/vrstartup" -c)" -eq 0 ] ; then
				writelog "$(date) - WAIT - ${FUNCNAME[0]} - no vrstartup instance running"
				break
			fi
			writelog "$(date) - WAIT - ${FUNCNAME[0]} - waiting for end of vrstartup TIMEOUT?"
		done
	fi
	
	if [ "$SVRJUSTSTARTED" -eq 1 ]; then
	MAXWAIT=10
	COUNTER=0
		while ! pgrep "" -a | grep -v grep | grep "/vrcompositor" -q; do
			if [[ "$COUNTER" -ge "MAXWAIT" ]]; then
				writelog "$(date) - SKIP - ${FUNCNAME[0]} - ERROR - timeout waiting for SteamVR - exit"
				pkill -9 "$VRVIDEOPLAYER"
				RUNSBSVR=0
				exit 1
			fi
			writelog "$(date) - WAIT - ${FUNCNAME[0]} - sec $COUNTER/$MAXWAIT waiting for vrcompositor"
			COUNTER=$((COUNTER+1))
			sleep 1
		done
	else
		writelog "$(date) - INFO - ${FUNCNAME[0]} -  we didn't start steamvr before so no need to wait for vrcompositor"
	fi

	if pgrep "" -a | grep -v grep | grep "/vrcompositor" -q ; then
		while true; do
			if [ "$(pgrep "" -a | grep -v grep | grep "/vrstartup" -c)" -eq 0 ] ; then
				writelog "$(date) - WAIT - ${FUNCNAME[0]} - no vrstartup instance running - looks good"
				break
			fi
			sleep 1
			writelog "$(date) - WAIT - ${FUNCNAME[0]} - waiting for end of vrstartup"
		done

		writelog "$(date) - OK - ${FUNCNAME[0]} - success - SteamVR running"
		sleep 1 # better safe than sorry
		
	else
		writelog "$(date) - SKIP - ${FUNCNAME[0]} - SteamVR start failed - vrcompositor still not running - skipping SBS-VR!"
		export RUNSBSVR=0
	fi
}

function SBSgetGamePID {
	if [ "$RUNSBSVR" -ge 1 ]; then
		if [ "$SAVESBSWINNAME" -gt 0 ]; then
			if [ ! -f "$SBSTWEAKDIR/$AID.conf" ]; then
				writelog "$(date) - INFO - ${FUNCNAME[0]} - SAVESBSWINNAME is $SAVESBSWINNAME so waiting for $SBSTWEAKDIR/$AID.conf to appear holding the window name"
				while [ ! -f "$SBSTWEAKDIR/$AID.conf" ]; do
					writelog "$(date) - WAIT - ${FUNCNAME[0]} - waiting for $SBSTWEAKDIR/$AID.conf to appear"
					sleep 1
				done
			fi

			if [ -f "$SBSTWEAKDIR/$AID.conf" ]; then
				writelog "$(date) - INFO - ${FUNCNAME[0]} - config $SBSTWEAKDIR/$AID.conf is ready, getting the window name"
				exportCfgFile "$SBSTWEAKDIR/$AID.conf"
			fi
		fi

		if [ -n "$VRGAMEWINDOW" ]; then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - windowname VRGAMEWINDOW $VRGAMEWINDOW provided, explicit search for the game window"
		else
			writelog "$(date) - INFO - ${FUNCNAME[0]} - no windowname VRGAMEWINDOW provided, automatic generic search for the game window"
		fi

		writelog "$(date) - INFO - ${FUNCNAME[0]} - gamewindow $VRGAMEWINDOW found, getting the game PID"

		while true; do
			if [ -n "$VRGAMEWINDOW" ]; then
				GPID="$("$XWININFO" -name "${VRGAMEWINDOW//\"/}" -wm | grep "Process id:"   | awk -F 'Process id: ' '{print $2}' | cut -d ' ' -f1)"
				if [ -n "$GPID" ]; then
					writelog "$(date) - INFO - ${FUNCNAME[0]} - game pid $GPID found for VRGAMEWINDOW $VRGAMEWINDOW"
					export SBSVRKGPID="$GPID"
					break
				fi
			else
				GPID="$(GAMEPID)"

				if [ -n "$GPID" ]; then
					writelog "$(date) - INFO - ${FUNCNAME[0]} - game pid $GPID found"
					export SBSVRKGPID="$GPID"
					break
				fi
			fi
		done

		writelog "$(date) - OK - ${FUNCNAME[0]} - success - found PID $SBSVRKGPID for gamewindow $VRGAMEWINDOW"
	else
		writelog "$(date) - SKIP - ${FUNCNAME[0]} - skipping because RUNSBSVR was set to 0"
	fi
}

function SBSrunVRVideoPlayer {
	VRGAMEWINDOWID="$1"

	if [ "$RUNSBSVR" -ge 1 ]; then
		if [ -z "$VRGAMEWINDOWID" ]; then
			writelog "$(date) - SKIP - ${FUNCNAME[0]} - ERROR - VRGAMEWINDOWID $VRGAMEWINDOWID is empty - "
			writelog "$(date) - SKIP - ${FUNCNAME[0]} - ERROR - forcefully killing game with pkill -9 $SBSVRKGPID - should exit this script as well"
			pkill -9 "$SBSVRKGPID"
		else
			if [ -z "$VRVIDEOPLAYERARGS" ];
			then
				writelog "$(date) - SKIP - ${FUNCNAME[0]} - ERROR - no VRVIDEOPLAYERARGS $VRVIDEOPLAYERARGS"
			fi
			
			IFS=" " read -r -a RUNVRVIDEOPLAYERARGS <<< "$VRVIDEOPLAYERARGS"
			writelog "$(date) - INFO - ${FUNCNAME[0]} - starting $VRVIDEOPLAYER with args ${RUNVRVIDEOPLAYERARGS[*]} for windowid $VRGAMEWINDOWID"

			GWIDDEC="$(("$VRGAMEWINDOWID"))"
			echo "GWIDDEC=$GWIDDEC" > "$GWIDFILE"

			if [ -z "$SBSZOOM" ]; then
				"$VRVIDEOPLAYER" "${RUNVRVIDEOPLAYERARGS[@]}" "$VRGAMEWINDOWID"  2>/dev/null &
			else
				"$VRVIDEOPLAYER" "${RUNVRVIDEOPLAYERARGS[@]}" --zoom "$SBSZOOM" "$VRGAMEWINDOWID"  2>/dev/null &
			fi
			
			writelog "$(date) - INFO - ${FUNCNAME[0]} - waiting for $VRVIDEOPLAYER window $SBSVRWINNAME for VRGAMEWINDOWID $VRGAMEWINDOWID"

	MAXWAIT=20
	COUNTER=0
			while ! "$XWININFO" -name "$SBSVRWINNAME" -stats  >/dev/null 2>/dev/null; do
				if [[ "$COUNTER" -ge "MAXWAIT" ]]; then
					writelog "$(date) - SKIP - ${FUNCNAME[0]} - ERROR - timeout waiting for $VRVIDEOPLAYER - exit"
					pkill -9 "$VRVIDEOPLAYER"
					RUNSBSVR=0
					exit 1
				fi

				if ! pgrep "$VRVIDEOPLAYER" ; then
					writelog "$(date) - SKIP - ${FUNCNAME[0]} - ERROR - $VRVIDEOPLAYER not running (crashed?) no need to wait for its window to appear - exit"
					RUNSBSVR=0
					exit 1
				fi
				
				writelog "$(date) - WAIT - ${FUNCNAME[0]} - WAIT - $COUNTER/$MAXWAIT sec waiting for $VRVIDEOPLAYER window $SBSVRWINNAME"
				COUNTER=$((COUNTER+1))
				sleep 1
			done

# player windowid:
#			SBSVRWID=$(printf 0x%x "$("$XDO" search --name "$SBSVRWINNAME")")
			SBSVRWID=$("$XWININFO" -name "$SBSVRWINNAME" -stats | grep "^$XWININFO" | awk -F 'id: ' '{print $2}' | cut -d ' ' -f1)
			if [ -n "$SBSVRWID" ]; then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - pressing w in $VRVIDEOPLAYER window $SBSVRWINNAME to adjust view: $XDO windowactivate --sync $SBSVRWID key w"
			"$XDO" windowactivate --sync "$SBSVRWID" key w

			writelog "$(date) - INFO - ${FUNCNAME[0]} - activating gamewindow with id $VRGAMEWINDOWID for input"
			"$XDO" windowactivate --sync "$VRGAMEWINDOWID" click 1
			else
				writelog "$(date) - SKIP - ${FUNCNAME[0]} - WARN - SBSVRWID $SBSVRWID is empty!"
			fi
		fi
	else
		writelog "$(date) - SKIP - ${FUNCNAME[0]} - skipping because RUNSBSVR was set to 0"
	fi
}

function SBSinitVRVideoPlayer {
	if [ "$RUNSBSVR" -ge 1 ]; then
		if [ -x "$(command -v "$VRVIDEOPLAYER" 2>/dev/null)" ]; then

			if [ "$SAVESBSWINNAME" -gt 0 ]; then
				if [ ! -f "$SBSTWEAKDIR/$AID.conf" ]; then
					writelog "$(date) - INFO - ${FUNCNAME[0]} - SAVESBSWINNAME is $SAVESBSWINNAME so waiting for $SBSTWEAKDIR/$AID.conf to appear holding the window name"
					while [ ! -f "$SBSTWEAKDIR/$AID.conf" ]; do
						writelog "$(date) - WAIT - ${FUNCNAME[0]} - waiting for $SBSTWEAKDIR/$AID.conf to appear"
						sleep 1
					done
				fi

				if [ -f "$SBSTWEAKDIR/$AID.conf" ]; then
					writelog "$(date) - INFO - ${FUNCNAME[0]} - config $SBSTWEAKDIR/$AID.conf is ready, getting the window name"
					exportCfgFile "$SBSTWEAKDIR/$AID.conf"
				fi
			fi

			if [ -z "$VRGAMEWINDOW" ]; then
				if [ -n "$(VRAUTOWINDOWID)" ]; then
					writelog "$(date) - INFO - ${FUNCNAME[0]} - trying to start $VRVIDEOPLAYER with automatically detected windowID $(VRAUTOWINDOWID):"
					SBSrunVRVideoPlayer	"$(VRAUTOWINDOWID)" 2>/dev/null &
				else
					writelog "$(date) - SKIP - ${FUNCNAME[0]} - ERROR - VRAUTOWINDOWID $(VRAUTOWINDOWID) is empty"
				fi
			else
				VRGAMEWINDOWID="$("$XWININFO" -name "${VRGAMEWINDOW//\"/}" -stats | grep "^$XWININFO" | awk -F 'id: ' '{print $2}' | cut -d ' ' -f1)"
				if [ -z "$VRGAMEWINDOWID" ]; then
					writelog "$(date) - SKIP - ${FUNCNAME[0]} - ERROR - could not find windowid $VRGAMEWINDOWID for the windowname $VRGAMEWINDOW"
					RUNSBSVR=0
				else
					writelog "$(date) - INFO - ${FUNCNAME[0]} - found windowid $VRGAMEWINDOWID for the windowname $VRGAMEWINDOW"
					SBSrunVRVideoPlayer	"$VRGAMEWINDOWID" 2>/dev/null &
				fi
			fi
		else
			writelog "$(date) - SKIP - ${FUNCNAME[0]} - command $VRVIDEOPLAYER not found - skipping"
		fi
	else
		writelog "$(date) - SKIP - ${FUNCNAME[0]} - skipping because RUNSBSVR was set to 0"
	fi
}

function SBSstopVRVideoPlayer {
	if [ "$RUNSBSVR" -ge 1 ]; then
		writelog "$(date) - INFO - ${FUNCNAME[0]} - waiting for game process $SBSVRKGPID to finish..."
		
		if [ "$(pgrep "" -a | grep -v grep | grep "/vrcompositor" -c)" -eq 0 ] ; then
			writelog "$(date) - SKIP - ${FUNCNAME[0]} - ERROR - vrcompositor not running but it should - bailing out DRYRUN"
#			pkill -9 "$VRVIDEOPLAYER"
#			writelog "$(date) - SKIP - ${FUNCNAME[0]} - ########## killed SBS-VR ##########"
#			exit
		fi

		tail --pid="$SBSVRKGPID" -f /dev/null
		writelog "$(date) - INFO - ${FUNCNAME[0]} - game process $SBSVRKGPID finished - closing $VRVIDEOPLAYER"

		if [ -f "$GWIDFILE" ]; then
			source "$GWIDFILE"
			GWIDTXT=/tmp/"$VRVIDEOPLAYER"_"$GWIDDEC"

			if [ -f "$GWIDTXT" ]; then
				writelog "$(date) - INFO - ${FUNCNAME[0]} - $GWIDTXT found"
				updateConfigEntry "SBSZOOM" "$(cat "$GWIDTXT")" "$SBSTWEAKDIR/$AID.conf"
				rm "$GWIDTXT" >/dev/null 2>/dev/null
			fi
			rm "$GWIDFILE" >/dev/null 2>/dev/null
		fi
		pkill -9 "$VRVIDEOPLAYER"

		writelog "$(date) - OK - ${FUNCNAME[0]} - -------- finished SBS-VR --------"
	else
		writelog "$(date) - SKIP - ${FUNCNAME[0]} - skipping because RUNSBSVR was set to 0"
	fi
}

function runSBSVR {
	if [ "$RUNSBSVR" -ge 1 ]; then
		SBSstartSVR
		SBSgetGamePID
		SBSinitVRVideoPlayer
		SBSstopVRVideoPlayer
	fi
}

# start game in side-by-side VR:
function checkSBSVRLaunch {
	if [ -n "$RUNSBSVR" ]; then
		if [ "$RUNSBSVR" -ge 1 ]; then
		# override game configs with a sbs-tweak config if available:

		# first look for a global tweak:
			if [ -f "$GLOBALSBSTWEAKDIR/$AID.conf" ]; then
				writelog "$(date) - INFO - ${FUNCNAME[0]} - VR using overrides found in $GLOBALSBSTWEAKDIR/$AID.conf"
				exportCfgFile "$GLOBALSBSTWEAKDIR/$AID.conf"
			fi

		# then for a user tweak - (overriding the global one):
			if [ -f "$SBSTWEAKDIR/$AID.conf" ]; then
				writelog "$(date) - INFO - ${FUNCNAME[0]} - VR using overrides found in $SBSTWEAKDIR/$AID.conf"
				exportCfgFile "$SBSTWEAKDIR/$AID.conf"
			fi

		# Crysis 2 enable SBS in gameconfig:
			if [ "$AID" -eq "108800" ]; then
				CRY2CFG="$STEAM_COMPAT_DATA_PATH/pfx/drive_c/users/steamuser/Saved Games/Crysis2/game.cfg"
				if [ -f "$CRY2CFG" ]; then
					writelog "$(date) - HACK - ${FUNCNAME[0]} - SteamID $AID Crysis 2 found - editing gameconfig $CRY2CFG to enable Stereo Support"
					echo "r_StereoSupportAMD=1" >> "$CRY2CFG"
					sort -u "$CRY2CFG" -o "$CRY2CFG"
				else
					writelog "$(date) - SKIP - ${FUNCNAME[0]} -HACK failed - SteamID $AID Crysis 2 found but gameconfig $CRY2CFG not found to insert Stereo Support - restarting the game should fix this"
				fi
			fi

		# start the whole side-by-side process:
			export VRGAMEWINDOW="$VRGAMEWINDOW"
			writelog "$(date) - INFO - ${FUNCNAME[0]} - ${FUNCNAME[0]} - starting VRlaunch $VRGAMEWINDOW for $AID"
			if [ "$RUNSBSVR" -eq 1 ]; then
			runSBSVR &
			elif [ "$RUNSBSVR" -gt 1 ]; then
				writelog "$(date) - INFO - ${FUNCNAME[0]} - RUNSBSVR is greater than 1 - starting SteamVR and SBS delayed for RUNSBSVR $RUNSBSVR seconds"
				( sleep "$RUNSBSVR"; runSBSVR) &
			else
				writelog "$(date) - SKIP - ${FUNCNAME[0]} - ${FUNCNAME[0]} ERROR - RUNSBSVR is $RUNSBSVR which is invalid - setting to 0"
				RUNSBSVR=0
			fi
		fi
	fi
}


##### SBS VR BLOCK END #####

#### RESHADE BLOCK START ####

STLRSCFG="$STLCFGDIR/reshade.conf"	# reshade config
RS_D3D47_DEST="d3dcompiler_47.dll"
RS_DX_DEST="dxgi.dll"
RS_D9_DEST="d3d9.dll"

# prepare reshade files if not found:
function prepareReshadeFiles {
	THISCFG="$STLRSCFG"

	if [ -f "$THISCFG" ]; then
		# add missing config entries in the default global config:
		updateConfigFile "$THISCFG" "prepareReshadeFiles"
	else
		# create config if not found:
		writelog "$(date) - INFO - ${FUNCNAME[0]} - creating $STLRSCFG"
		{
		echo "## config Version: $PROGVERS"
		echo "##########################"
		echo "## ReShade online ressources - see README:"
		echo "DL_D3D47_64=https://lutris.net/files/tools/dll/d3dcompiler_47.dll"
		echo "DL_D3D47_32=http://dege.freeweb.hu/dgVoodoo2/D3DCompiler_47.zip"
		echo "RSSETUP=https://reshade.me/downloads/ReShade_Setup_4.7.0.exe"
		echo "## allow download of ReShade sourcefiles:"
		echo "#DOWNLOAD_RESHADE=1"
		echo "## ReShade sourcefiles:"
		echo "RESHADESRCDIR=$STLCFGDIR/reshade"
		echo "RS_D3D47_64=d3dcompiler_47_64.dll"
		echo "RS_D3D47_32=d3dcompiler_47_32.dll"
		echo "RS_64=ReShade64.dll"
		echo "RS_32=ReShade32.dll"
		} >> "$THISCFG"
	fi
#ENDprepareReshadeFiles

	exportCfgFile "$STLRSCFG"

	if [ "$DOWNLOAD_RESHADE" -eq 1 ]; then
		writelog "$(date) - INFO - ${FUNCNAME[0]} - DOWNLOAD_RESHADE enabled"

		if [ -n "$RESHADESRCDIR" ]; then
			if [ ! -f "$RESHADESRCDIR/$RS_D3D47_32" ]; then
				writelog "$(date) - 404 - ${FUNCNAME[0]} - $RESHADESRCDIR/$RS_D3D47_32 missing - downloading"

				if [ ! -d "$RESHADESRCDIR" ]; then
					writelog "$(date) - 404 - ${FUNCNAME[0]} - $RESHADESRCDIR does not exist - trying to create it" 
					mkdir -p "$RESHADESRCDIR" >/dev/null 2>/dev/null
				fi

				if [ -d "$RESHADESRCDIR" ]; then
					writelog "$(date) - INFO - ${FUNCNAME[0]} - $RESHADESRCDIR exist - installing ReShade in here" 
					DLDST="$RESHADESRCDIR/d3dcompiler_47.zip"
					"$WGET" "$DL_D3D47_32" -O "$DLDST"
					"$UNZIP" "$DLDST" -d "$RESHADESRCDIR"
					mv "$RESHADESRCDIR/d3dcompiler_47.dll" "$RESHADESRCDIR/$RS_D3D47_32"
				fi
			fi

			if [ ! -f "$RESHADESRCDIR/$RS_D3D47_64" ]; then
				writelog "$(date) - 404 - ${FUNCNAME[0]} - $RESHADESRCDIR/$RS_D3D47_64 missing - downloading" 
				"$WGET" "$DL_D3D47_64" -O "$RESHADESRCDIR/$RS_D3D47_64"
			fi

			if [ ! -f "$RESHADESRCDIR/$RS_64" ] || [ ! -f "$RESHADESRCDIR/$RS_32" ] ; then
				writelog "$(date) - 404 - ${FUNCNAME[0]} - $RESHADESRCDIR/$RS_64 and/or $RS_32 missing - downloading"
				DLDST="$RESHADESRCDIR/ReShade_Setup.exe"
				"$WGET" "$RSSETUP" -O "$DLDST"
				"$UNZIP" "$DLDST" -d "$RESHADESRCDIR"
			fi
		fi
	fi
	
# make sure Depth3D is even wanted
	if [ "$RESHADE_DEPTH3D" -eq 1 ]; then
		writelog "$(date) - INFO - ${FUNCNAME[0]} - RESHADE_DEPTH3D enabled"
# and then only pull/clone it when CLONE_DEPTH3D is allowed 
		checkReShadeDepth3D
	fi	
}

function checkReShadeDepth3D {
	if [ "$CLONE_DEPTH3D" -eq 1 ]; then
		writelog "$(date) - INFO - ${FUNCNAME[0]} - CLONE_DEPTH3D enabled"
		if [ -n "$DEPTH3DSRCDIR" ]; then
			if [ -d "$DEPTH3DSRCDIR/.git" ]; then
				writelog "$(date) - INFO - ${FUNCNAME[0]} - pulling $DEPTH3DURL update in $PWD"
				LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" LD_PRELOAD="" "$GIT" --work-tree="$DEPTH3DSRCDIR" --git-dir="$DEPTH3DSRCDIR/.git" pull
			else
				writelog "$(date) - INFO - ${FUNCNAME[0]} - creating dir $DEPTH3DSRCDIR"
				mkdir "$DEPTH3DSRCDIR" >/dev/null 2>/dev/null
				writelog "$(date) - INFO - ${FUNCNAME[0]} - cloning $DEPTH3DURL in $DEPTH3DSRCDIR"
				LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" LD_PRELOAD="" "$GIT" clone "$DEPTH3DURL" "$DEPTH3DSRCDIR"
			fi
		else
			writelog "$(date) - SKIP - ${FUNCNAME[0]} - ERROR - variable DEPTH3DSRCDIR is empty - skipping Depth3D update"
		fi
	fi
}

# install reshade:
function installReshade {
	if [ -n "$INSTALL_RESHADE" ]; then
		if [ "$INSTALL_RESHADE" -eq 1 ]; then

			prepareReshadeFiles

			writelog "$(date) - INFO - ${FUNCNAME[0]} - INSTALL_RESHADE enabled"
	#32bit:
			if [ "$(LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" LD_PRELOAD="" file "$GP" | grep -c "PE32 ")" -eq 1 ]; then
				writelog "$(date) - INFO - ${FUNCNAME[0]} - installing 32bit Reshade as $GE is 32bit" 

				if [ ! -f "$GFD/$RS_D3D47_DEST" ]; then
					if [ ! -f "$RESHADESRCDIR/$RS_D3D47_32" ]; then
						writelog "$(date) - SKIP - ${FUNCNAME[0]} - sourcefile $RESHADESRCDIR/$RS_D3D47_32 missing - skipping this file" 
					else
						cp "$RESHADESRCDIR/$RS_D3D47_32" "$GFD/$RS_D3D47_DEST" >/dev/null 2>/dev/null
						writelog "$(date) - INFO - ${FUNCNAME[0]} - copied $RESHADESRCDIR/$RS_D3D47_32 to $GFD/$RS_D3D47_DEST" 
					fi
				else
					writelog "$(date) - SKIP - ${FUNCNAME[0]} - destfile $GFD/$RS_D3D47_DEST already exists - skipping this file" 
				fi

	#dxgi:
				if [ ! -f "$GFD/$RS_DX_DEST" ]; then
					if [ ! -f "$RESHADESRCDIR/$RS_32" ]; then
						writelog "$(date) - SKIP - ${FUNCNAME[0]} - sourcefile $RESHADESRCDIR/$RS_32 missing - skipping this file" 
					else
						cp "$RESHADESRCDIR/$RS_32" "$GFD/$RS_DX_DEST" >/dev/null 2>/dev/null
						writelog "$(date) - INFO - ${FUNCNAME[0]} - copied $RESHADESRCDIR/$RS_32 to $GFD/$RS_DX_DEST" 
					fi
				else
					writelog "$(date) - SKIP - ${FUNCNAME[0]} - destfile $GFD/$RS_DX_DEST already exists - skipping this file" 
				fi

	#d3d9:
				if [ ! -f "$GFD/$RS_D9_DEST" ]; then
					if [ ! -f "$RESHADESRCDIR/$RS_32" ]; then
						writelog "$(date) - SKIP - ${FUNCNAME[0]} - sourcefile $RESHADESRCDIR/$RS_32 missing - skipping this file" 
					else
						cp "$RESHADESRCDIR/$RS_32" "$GFD/$RS_D9_DEST" >/dev/null 2>/dev/null
						writelog "$(date) - INFO - ${FUNCNAME[0]} - copied $RESHADESRCDIR/$RS_32 to $GFD/$RS_D9_DEST" 
					fi
				else
					writelog "$(date) - SKIP - ${FUNCNAME[0]} - destfile $GFD/$RS_D9_DEST already exists - skipping this file" 
				fi

	# 64bit:
			elif  [ "$(LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" LD_PRELOAD="" file "$GP" | grep -c "PE32+ ")" -eq 1 ]; then
				writelog "$(date) - INFO - ${FUNCNAME[0]} - installing 64bit Reshade as $GE is 64bit" 

				if [ ! -f "$GFD/$RS_D3D47_DEST" ]; then
					if [ ! -f "$RESHADESRCDIR/$RS_D3D47_64" ]; then
						writelog "$(date) - SKIP - ${FUNCNAME[0]} - sourcefile $RESHADESRCDIR/$RS_D3D47_64 missing - skipping this file" 
					else
						cp "$RESHADESRCDIR/$RS_D3D47_64" "$GFD/$RS_D3D47_DEST" >/dev/null 2>/dev/null
						writelog "$(date) - INFO - ${FUNCNAME[0]} - copied $RESHADESRCDIR/$RS_D3D47_64 to $GFD/$RS_D3D47_DEST" 
					fi
				else
					writelog "$(date) - SKIP - ${FUNCNAME[0]} - destfile $GFD/$RS_D3D47_DEST already exists - skipping this file" 
				fi

	#dxgi:
				if [ ! -f "$GFD/$RS_DX_DEST" ]; then
					if [ ! -f "$RESHADESRCDIR/$RS_64" ]; then
						writelog "$(date) - SKIP - ${FUNCNAME[0]} - sourcefile $RESHADESRCDIR/$RS_64 missing - skipping this file" 
					else
						cp "$RESHADESRCDIR/$RS_64" "$GFD/$RS_DX_DEST" >/dev/null 2>/dev/null
						writelog "$(date) - INFO - ${FUNCNAME[0]} - copied $RESHADESRCDIR/$RS_64 to $GFD/$RS_DX_DEST" 
					fi
				else
					writelog "$(date) - SKIP - ${FUNCNAME[0]} - destfile $GFD/$RS_DX_DEST already exists - skipping this file" 
				fi
	#d3d9:
				if [ ! -f "$GFD/$RS_D9_DEST" ]; then
					if [ ! -f "$RESHADESRCDIR/$RS_64" ]; then
						writelog "$(date) - SKIP - ${FUNCNAME[0]} - sourcefile $RESHADESRCDIR/$RS_64 missing - skipping this file" 
					else
						cp "$RESHADESRCDIR/$RS_64" "$GFD/$RS_D9_DEST" >/dev/null 2>/dev/null
						writelog "$(date) - INFO - ${FUNCNAME[0]} - copied $RESHADESRCDIR/$RS_64 to $GFD/$RS_D9_DEST" 
					fi
				else
					writelog "$(date) - SKIP - ${FUNCNAME[0]} - destfile $GFD/$RS_D9_DEST already exists - skipping this file" 
				fi
			else
					writelog "$(date) - SKIP - ${FUNCNAME[0]} - ERROR in ReShade installation - no file information detected from $GP - setting USERESHADE=0 for this session"
					export USERESHADE=0
			fi
		fi
	fi
}

function installReshadeDepth3D {
	if [ -n "$RESHADE_DEPTH3D" ]; then
		if [ "$RESHADE_DEPTH3D" -eq 1 ]; then
			checkReShadeDepth3D

			writelog "$(date) - INFO - ${FUNCNAME[0]} - copying shaders into gamedir"
			find "$DEPTH3DSRCDIR/Shaders/" -maxdepth 1 -name "*.fx*" | while read -r file; do
				writelog "$(date) - INFO - ${FUNCNAME[0]} - CHECKING $GFD/$(basename "$file")"

				if [ -f "$GFD"/"$(basename "$file")" ]; then
					writelog "$(date) - INFO - ${FUNCNAME[0]} - $GFD/$(basename "$file") already exists - updating"
					cp "$file" "$GFD"
				else
					writelog "$(date) - INFO - ${FUNCNAME[0]} - copying new file $file to $GFD"
					cp "$file" "$GFD"
				fi
			done
		fi
	fi
}

function useReshade {
	if [ -n "$USERESHADE" ]; then
		if [ "$USERESHADE" -eq 1 ]; then
			if [ ! -f "$GFD/$RS_D3D47_DEST" ]; then
				writelog "$(date) - INFO - ${FUNCNAME[0]} - looks like Reshade is not yet installed in $GFD - installing because USERESHADE is enabled"
				INSTALL_RESHADE=1 installReshade
			fi
			writelog "$(date) - INFO - ${FUNCNAME[0]} - setting WINEDLLOVERRIDES for ReShade: dxgi=n,b;d3d9=n,b;d3dcompiler_47=n,b"
			export WINEDLLOVERRIDES="dxgi=n,b;d3d9=n,b;d3dcompiler_47=n,b"
		fi
	fi	
}

#### RESHADE BLOCK END ####


#### CONFIG BLOCK START ####

function exportCfgFile {
	writelog "$(date) - INFO - ${FUNCNAME[0]} - $1 START"
	CFGFILE="$1"
	while read -r line; do
		export "${line?}"
	done <<< "$(grep -v "^#\|^$" "$CFGFILE")"
	writelog "$(date) - INFO - ${FUNCNAME[0]} - $1 STOP"
}

function PROTONVERSION {
	PROTONCMD="$(echo "$*" | awk -F ' waitforexitandrun' '{print $1}')"
	PROTONVERSION="$(dirname "$PROTONCMD")/version"
	awk '{print $2}' < "$PROTONVERSION"
}

function getUsedVars {
	while read -r line; do 
		if  grep -q -v "^#" <<< "$line"; then
			awk -F '=' '{print $1}' <<< "$line" 
		fi
	done <"$1"
}

function startEditor {

# loading all variables defined before editing into an array, so they can be unset after editing.

	readarray -t OLDSTLVARS <<<"$(getUsedVars "$STLGAMECFG")"

# start the editor:
	KILLBROWSER=0

	writelog "$(date) - INFO - ${FUNCNAME[0]} - key pressed on launch - starting STLEDITOR $STLEDITOR with config STLGAMECFG $STLGAMECFG"
	if [ "$PROTONDB" -eq 1 ]; then
		writelog "$(date) - INFO - ${FUNCNAME[0]} - PROTONDB is set to 1 - also opening the protondb url in the browser"
		if [ -x "$(command -v "$BROWSER" 2>/dev/null)" ]; then
		
			# if we open a new BROWSER instance here, we're going to kill it when the game launches, else the game won't "exit" in steam 
			if pgrep "$BROWSER" ; then
				KILLBROWSER=0
			else
				KILLBROWSER=1
			fi
		
			"$BROWSER" "$PDBURL/$AID" & 
		fi
	fi
	"$STLEDITOR" "$STLGAMECFG"

# unsetting variables from old config:

	for o in "${OLDSTLVARS[@]}"; do
		writelog "$(date) - INFO - ${FUNCNAME[0]} - unsetting variable $o"
		unset "$o"
	done

# kill browser if it was opened with the editor:
	if [ "$KILLBROWSER" -eq 1 ]; then
		pkill -9 "$BROWSER"
	fi
}

function editGameConfig {
# sourcing gameconfig, to optionally override global WAITEDITOR
	exportCfgFile "$STLGAMECFG"

# preload forced tweaks # setting WAITEDITOR so the editor doesn't conflict with forced tweaks
	preloadForcedTweaks

# open editor requester 
	if [ "$WAITEDITOR" -gt 0 ]; then
		if [ -x "$(command -v "$STEAM_ZENITY" 2>/dev/null)" ]; then

			"$STEAM_ZENITY" --title="$PROGNAME ($PROGCMD) - $PROGVERS" --question --text="start editor" --ok-label=edit --cancel-label=cancel --timeout="$WAITEDITOR" --width 350
			case $? in
				0) startEditor
				;;
				1) writelog "$(date) - INFO - ${FUNCNAME[0]} - key not pressed - starting game"
				;;
			esac
		else
			writelog "$(date) - SKIP - ${FUNCNAME[0]} - $STEAM_ZENITY not found"
		fi
	fi
}

# create project dir $1 if $2 is 1 or empty
function mkProjDir {
	if [ -n "$2" ]; then
		if [ "$2" -eq 1 ]; then
			if [ ! -d "$1" ]; then
				mkdir -p "$1" 2>/dev/null >/dev/null
			fi
		fi
	fi
}

# create project dirs
function createProjectDirs {
	mkProjDir "$LOGDIR" 1
	mkProjDir "$STLGAMEDIR" 1
	mkProjDir "$STLDXVKDIR" "$CREATESTLDXVKCFGTMPL"
	mkProjDir "$TWEAKDIR" "$CREATETWEAKS"
	mkProjDir "$TWEAKDIR" "$USETWEAKS"
	mkProjDir "$SBSTWEAKDIR" "$RUNSBSVR"
	mkProjDir "$RESHADESRCDIR" "$INSTALL_RESHADE"
}

# add missing config entries to configfile $1 using seperator $2:
function updateConfigFile {
	CFGFILE="$1"
	SEP="$2"
	
	if grep -q "config Version: $PROGVERS" "$1"; then
		writelog "$(date) - SKIP - ${FUNCNAME[0]} - config file $CFGFILE already at version $PROGVERS"
	else
		OLDVERS="$(grep "config Version" "$CFGFILE" | awk -F ': ' '{print $2}')"
		
		if [ -n "$OLDVERS" ]; then
			writelog "$(date) - OK - ${FUNCNAME[0]} - updating $CFGFILE from $OLDVERS to $PROGVERS"
			sed "s/config Version: $OLDVERS/config Version: $PROGVERS/" -i "$CFGFILE"
		else
			writelog "$(date) - OK - ${FUNCNAME[0]} - updating $CFGFILE to $PROGVERS"
			sed "1s/^/##########################\n/" -i "$CFGFILE"
			sed "1s/^/## config Version: $PROGVERS\n/" -i "$CFGFILE"
		fi

		while read -r ENTRY; do
			if ! grep "$ENTRY=" "$CFGFILE" >/dev/null ; then
				writelog "$(date) - UPDATE- ${FUNCNAME[0]} - entry $ENTRY is missing in $CFGFILE - adding it now!"
				ELINEG="$(sed -n "/^function $SEP/,/^#END$SEP/p;/^#END$SEP/q" "$0" | grep "$ENTRY=" | awk -F 'echo ' '{print $2}' | sed 's/\"//g')"
				ELINEP="${ELINEG//\$PROGCMD/$PROGCMD}"
				ELINE="${ELINEP//\$HOME/$HOME}"
				EDESC="$(grep -B1 "$ELINEG" "$0" | head -n1 | awk -F 'echo ' '{print $2}' | sed 's/\"//g')"

				if grep "##" <<< "$EDESC"; then
					writelog "$(date) - UPDATE- ${FUNCNAME[0]} - adding description previous line $EDESC"
					echo "$EDESC" >> "$CFGFILE"
				fi
				
				writelog "$(date) - UPDATE- ${FUNCNAME[0]} - adding line $ELINE"
				echo "$ELINE" >> "$CFGFILE"
			fi
		done <<< "$(sed -n "/^function $SEP/,/^#END$SEP/p;/^#END$SEP/q" "$0" | grep "echo" | grep "=" | cut -d '"' -f2 | cut -d '=' -f1 | sed 's/^#//')"
	fi
}

# create the default global config if not found:
function createDefaultGlobalCfg {
	mkProjDir "$STLCFGDIR" 1

	THISCFG="$STLDEFGLOBALCFG"

	if [ -f "$THISCFG" ]; then
		# add missing config entries in the default global config:
		updateConfigFile "$THISCFG" "createDefaultGlobalCfg"
	else
		echo "default global config not found - creating it"
		{
		echo "## config Version: $PROGVERS"
		echo "##########################"
		echo "## create an empty \$STLDXVKCFG_tmpl for easier editing when required"
		echo "CREATESTLDXVKCFGTMPL=0"
		echo "## the base strace path used to optionally dump strace logs"
		echo "STRACEDIR=/tmp/"
		echo "## default logfile dir"
		echo "LOGDIR=$LOGDIR"
		echo "## write logfile if enabled"
		echo "WRITELOG=1"
		echo "## texteditor to use for opening the gameconfig - f.e. with WAITEDITOR"
		echo "STLEDITOR=geany"
		echo "## wait WAITEDITOR seconds for a keypress to open the texteditor STLEDITOR with the game config"
		echo "WAITEDITOR=2"
		echo "## set PROTONDB to 1 to also open protondb.com for the game in your $BROWSER when starting the editor STLEDITOR:"
		echo "PROTONDB=0"
		echo "## protondb base url - for optional PROTONDB"
		echo "PDBURL=https://www.protondb.com/app"
		echo "## Browser used for PROTONDB:"
		echo "BROWSER=firefox"
		echo "## SteamAppId where the custom game launcher is triggered if RUN_CUSTOMCMD is set"
		echo "CUSTOMLAUNCHID=15520"																	
		echo "## if set this command is used to block the internet for the selected game. game might fail to start!"
		echo "#NOINET=sg no-internet"
		echo "## program to record game network-traffic - used when enabled"
		echo "#NETMON=netstat"
		echo "## options for NETMON:"
		echo "NETOPTS=-taucp -W"
		echo "## the base path for netmon logs"
		echo "NETMONDIR=$STLCFGDIR/netmon"
		echo "## start game with $GAMEMODERUN:"
		echo "USEGAMEMODERUN=1"
		echo "## use mangohud:"
		echo "MANGOHUD=0"
		echo "## set to 1 to start the game with vkbasalt:"
		echo "ENABLE_VKBASALT=0"
		echo "## set to 1 to enable nyrna while game is running"
		echo "RUN_NYRNA=0"
		echo "## set to 1 to enable replay-sorcery while game is running"
		echo "RUN_REPLAY=0"
		echo "## toggle visibility of all open windows on start/stop"
		echo "TOGGLEWINDOWS=0"
		echo "## vr-video-player"
		echo "VRVIDEOPLAYER=vr-video-player"
		echo "## vr-video-player args"
		echo "VRVIDEOPLAYERARGS=--flat"
		echo "## tweaks are only useful if some people contribute gamespecific tweaks, else this will vanish:"
		echo "## set to 1 to override settings with tweaks when found "
		echo "USETWEAKS=1"
		echo "## set to 1 create tweak config templates for the launched game if not found"
		echo "CREATETWEAKS=0"
		echo "## seconds to wait to automatically save a new basic SBS tweak config of the running game with the gamewindow name after game launch - 0 to disable - 1 to pick a window"
		echo "SAVESBSWINNAME=0"
		echo "## set to 1 to auto-apply registry files for AID when found or enter a registry filename which should be loaded from either GLOBALREGDIR or STLREGDIR"
		echo "REGEDIT=0"
		echo "## directory with global registry files"
		echo "GLOBALREGDIR=/usr/share/$PROGCMD/regs"
		echo "## directory with global sbs-tweaks"
		echo "GLOBALSBSTWEAKDIR=/usr/share/$PROGCMD/sbs"
		echo "## directory with global tweaks"
		echo "GLOBALTWEAKDIR=/usr/share/$PROGCMD/tweaks"
		echo "## directory for global steam category configs:"
		echo "GLOBALCATEGORYDIR=/usr/share/$PROGCMD/categories"
		echo "## directory for global steam category configs:"
		echo "## the boxtron command:"
		echo "BOXTRONCMD=/usr/share/boxtron/run-dosbox"
		echo "## boxtron args:"
		echo "BOXTRONARGS=--wait-before-run"
		echo "## the roberta command:"
		echo "ROBERTACMD=$HOME/.local/share/Steam/compatibilitytools.d/roberta/run-vm"
		echo "## roberta args:"
		echo "ROBERTAARGS=--wait-before-run"
		echo "## the luxtorpeda command:"
		echo "LUXTORPEDACMD=$HOME/.local/share/Steam/compatibilitytools.d/luxtorpeda/luxtorpeda"
		echo "## luxtorpeda args:"
		echo "LUXTORPEDAARGS=wait-before-run"
		echo "##### SideBySide #####"
		echo "## Depth3D git project:"
		echo "DEPTH3DURL=https://github.com/BlueSkyDefender/Depth3D.git"
		echo "## allow git clone of Depth3D shaderfiles :"
		echo "CLONE_DEPTH3D=0"
		echo "## Depth3D sourcefiles:"
		echo "DEPTH3DSRCDIR=$STLCFGDIR/Depth3D"
		} >> "$THISCFG"
	fi
}
#ENDcreateDefaultGlobalCfg


# create the default cfg "$STLDEFGAMECFG" if not found:
function createDefaultGameCfg {
	THISCFG="$STLDEFGAMECFG"

	if [ -f "$THISCFG" ]; then
		# add missing config entries in the default game config template STLDEFGAMECFG:
		updateConfigFile "$THISCFG" "createDefaultGameCfg"
	else
		writelog "$(date) - 404 - ${FUNCNAME[0]} - default game template config $STLDEFGAMECFG not found - creating it"
		{
		echo "## config Version: $PROGVERS"
		echo "##########################"
		echo "## set to 1 to override settings with tweaks when found - overrides USETWEAKS in global config"
		echo "#USETWEAKS=1"
		echo "## set to 1 to enable the custom command CUSTOMCMD:"
		echo "RUN_CUSTOMCMD=0"
		echo "## start this custom command:"
		echo "#CUSTOMCMD=yourProgram"
		echo "## start CUSTOMCMD command with following args:"
		echo "#CUSTOMCMD_ARGS=--some --args"
		echo "## set to 1 to only start above CUSTOMCMD and not the game command itself:"
		echo "ONLY_CUSTOMCMD=0"
		echo "## set to 1 to fork the custom CUSTOMCMD into the background and continue with starting %command%"
		echo "FORK_CUSTOMCMD=0"
		echo "## additional game args, so you don't have to append them in steam after %command%:"
		echo "#GAMEARGS=--some --args"
		echo "## start game with $GAMEMODERUN - overrides global config::"
		echo "#USEGAMEMODERUN=0"
		echo "## use mangohud - overrides global config:"
		echo "#MANGOHUD=0"
		echo "## set to 1 to start the game with vkbasalt - overrides global config:"
		echo "#ENABLE_VKBASALT=0"
		echo "## set to 1 to enable nyrna while game is running - overrides global config"
		echo "#RUN_NYRNA=0"
		echo "## set to 1 to enable replay-sorcery while game is running - overrides global config"
		echo "#RUN_REPLAY=0"
		echo "## force 32bit pfx:"
		echo "FORCE32BITPFX=0"
		echo "## useful for many games"
		echo "PULSE_LATENCY_MSEC=60"
		echo "## if set this command is used to block the internet for the selected game. game might fail to start - overrides global config"
		echo "#NOINET=sg no-internet"
		echo "## toggle visibility of all open windows on start/stop - overrides global config"
		echo "TOGGLEWINDOWS=0"
		echo "## seconds to wait to automatically save a new basic SBS tweak config of the running game with the gamewindow name after game launch - 0 to disable - 1 to pick a window - overrides global config"
		echo "SAVESBSWINNAME=0"
		echo "## set radv mode:"
		echo "#RADV_PERFTEST=aco"
		echo "## comment in to use amdvlk"
		echo "#VK_ICD_FILENAMES=/usr/share/vulkan/icd.d/amd_icd32.json:/usr/share/vulkan/icd.d/amd_icd64.json"
		echo "## OR comment in to use vulkan-radeon"
		echo "#VK_ICD_FILENAMES=/usr/share/vulkan/icd.d/radeon_icd.i686.json:/usr/share/vulkan/icd.d/radeon_icd.x86_64.json"
		echo "## start winetricks gui before game launch:"
		echo "RUN_WINETRICKS=0"
		echo "## install all packages in WINETRICKSPAKS silently with winetricks:"
		echo "#WINETRICKSPAKS=vcrun2015 xact"
		echo "## start winecfg before game launch:"
		echo "RUN_WINECFG=0"
		echo "## set to 1 to enable virtualdesktop for the game"
		echo "VIRTUALDESKTOP=0"
		echo "## set to 1 to start the game using boxtron/dosbox"
		echo "USEBOXTRON=0"
		echo "## set to 1 to start the game using roberta/scummvm"
		echo "USEROBERTA=0"
		echo "## set to 1 to start the game using luxtorpeda"
		echo "USELUXTORPEDA=0"
		echo "## set to 1 to auto-apply registry files for AID when found or enter a registry filename which should be loaded from either GLOBALREGDIR or STLREGDIR - overrides global config"
		echo "#REGEDIT=1"
		echo "## set to 1 to install ReShade:"
		echo "INSTALL_RESHADE=0"
		echo "## set to 1 to install ReShade Depth3D Shader into gamedir:"
		echo "RESHADE_DEPTH3D=0"
		echo "## set to 1 to start game with ReShade enabled:"
		echo "USERESHADE=0"
		echo "## set to 1 to start the game with VRVIDEOPLAYER in VR at once or to a greater value to delay SteamVR and SBS for RUNSBSVR seconds"
		echo "RUNSBSVR=0"
		echo "## vr-video-player args - overriding global settings"
		echo "VRVIDEOPLAYERARGS=--flat"
		echo "## vr-video-player zoom value"
		echo "#SBSZOOM=1.0"
		echo "## shortcut to enable all required flags for SBSVR with vkbasalt"
		echo "SBSVRVK=0"
		echo "## shortcut to enable all required flags for SBSVR with ReShade"
		echo "SBSVRRS=0"	
		echo "## optional name of the gamewindow for VRVIDEOPLAYER - works more stable and is faster:"
		echo "#VRGAMEWINDOW="
		echo "## overrides global WAITEDITOR config:"
		echo "#WAITEDITOR=0"
		echo "## overrides global PROTONDB config:"
		echo "#PROTONDB=1"
		echo "## notifier command:"
		echo "#NOTY=notify-send"
		echo "## proton vars:"
		echo "#PROTON_LOG=1"
		echo "#PROTON_DUMP_DEBUG_COMMANDS=1"
		echo "#PROTON_DEBUG_DIR=/tmp"
		echo "#PROTON_USE_WINED3D=1"
		echo "#PROTON_NO_D3D11=1"
		echo "#PROTON_NO_D3D10=1"
		echo "#PROTON_NO_ESYNC=1"
		echo "#PROTON_NO_FSYNC=1"
		echo "#PROTON_FORCE_LARGE_ADDRESS_AWARE=1"
		echo "#PROTON_OLD_GL_STRING=1"
		echo "#PROTON_USE_SECCOMP=1"
		echo "#PROTON_NO_WRITE_WATCH=1"
		echo "## dxvk vars - see https://github.com/doitsujin/dxvk"
		echo "#DXVK_HUD=1"
		echo "#DXVK_LOG_LEVEL=none|error|warn|info|debug Controls message logging."
		echo "#DXVK_LOG_PATH=/some/directory Changes path where log files are stored."
		echo "## wine vars:"
		echo "#WINE_FULLSCREEN_INTEGER_SCALING=0"
		echo "## strace settings:"
		echo "STRACERUN=0"
		echo "STRACEOPTS=-f -t -e trace=file"
		echo "## program to record game network-traffic - used when enabled - overrides global config"
		echo "#NETMON=netstat"
		echo "## options for NETMON - overrides global config:"
		echo "#NETOPTS=-taucp -W"
		} >> "$THISCFG"
	fi
}
#ENDcreateDefaultGameCfg

# create game configs:
function createGameCfg {
# MAIN GAME CONFIG STLDEFGAMECFG:

	THISCFG="$STLGAMECFG"

	if [ -f "$THISCFG" ]; then
		# add missing config entries in the default global config:
		updateConfigFile "$THISCFG" "createDefaultGameCfg"
	else
		{
		echo "## config Version: $PROGVERS"
		echo "##########################"
		echo "#########"
		echo "#$PROGNAME $PROGVERS"
		echo "#########"
		echo "#GAMENAME=$GN"
		echo "#GAMEEXE=$GE"
		echo "#GAMEID=$AID"
		echo "## set the default config file for DXVK_CONFIG_FILE which is used when found - defaults to config found in $STLDXVKDIR"
		echo "#STLDXVKCFG=$STLDXVKDIR/$AID.conf"
		echo "## vkbasalt config file:"
		echo "VKBASALT_CONFIG_FILE=$STLCFGDIR/vkBasalt.conf"
		grep -v "config Version" "$STLDEFGAMECFG"
		} >> "$THISCFG"
	fi

# DXVK CONFIG TEMPLATE:
# create "$STLDXVKCFG"_tmpl if CREATESTLDXVKCFGTMPL is set to 1
	if [ "$CREATESTLDXVKCFGTMPL" -eq 1 ]; then
		if [ ! -f "$STLDXVKCFG" ]; then
			touch "$STLDXVKCFG"_tmpl
		fi
	fi

# TWEAK CONFIG TEMPLATE:
	if [ -n "$CREATETWEAKS" ]; then
		if [ "$CREATETWEAKS" -eq 1 ]; then
# write tweak header if tweakfile not found:			
			createProjectDirs

			if [ ! -f "$TWEAKCFG" ] ; then
				{
				echo "#########"
				echo "#GAMENAME=$GN"
				echo "#GAMEEXE=$GE"
				echo "#GAMEID=$AID"
				echo "#PROTONVERSION=$(PROTONVERSION "$@")"
				echo "#########"
				} >> "$TWEAKCFG"
			fi
		fi
	fi
}

function GAMEPID {
# TODO catch game exe if CUSTOMCMD is just a wrapper
	if	[ "$RUN_CUSTOMCMD" -eq 1 ] && [ "$ONLY_CUSTOMCMD" -eq 1 ];then
		if [ "$CUSTOMCMD" == "lutris" ]; then
			pgrep "" -a | grep -v grep | grep "lutris-wrapper" | cut -d ' ' -f1 | tail -n1
		else
			pgrep "" -a | grep -v grep | grep "$CUSTOMCMD" | cut -d ' ' -f1 | tail -n1
		fi
	else
		pgrep "" -a | grep -v grep | grep "Z:" | grep "$GE" | grep "\.exe" | grep -v "CrashHandler"  | cut -d ' ' -f1 | tail -n1
	fi
}

function saveSBSWinName {
	if [ "$SAVESBSWINNAME" -gt 0 ]; then
		if [ -f "$SBSTWEAKDIR/$AID.conf" ]; then
			writelog "$(date) - SKIP - ${FUNCNAME[0]} - $SBSTWEAKDIR/$AID.conf does already exist - skipping"
		else
		if [ "$SAVESBSWINNAME" -eq 1 ]; then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - SAVESBSWINNAME is 1 so picking the window"
			NEWVRGAMEWINDOW=$("$XDO" selectwindow getwindowname)
		else
			writelog "$(date) - WAIT - ${FUNCNAME[0]} - waiting $SAVESBSWINNAME seconds to get the windowname"
			NEWVRGAMEWINDOW=$(sleep "$SAVESBSWINNAME"; "$XDO" getactivewindow getwindowname)	
		fi
			if [ -n "$NEWVRGAMEWINDOW" ]; then
				{
					echo "#########"
					echo "#GAMENAME=$GN"
					echo "#GAMEEXE=$GE"
					echo "#GAMEID=$AID"
					echo "#PROTONVERSION=$(PROTONVERSION "$@")"
					echo "#########"
					echo "VRGAMEWINDOW=\"$NEWVRGAMEWINDOW\""
				} >> "$SBSTWEAKDIR/$AID.conf"
				writelog "$(date) - INFO - ${FUNCNAME[0]} - created config $SBSTWEAKDIR/$AID.conf with windowname $NEWVRGAMEWINDOW"
			else
				writelog "$(date) - SKIP - ${FUNCNAME[0]} - found windowname $NEWVRGAMEWINDOW is invalid"
			fi
		fi
	fi
}

# override game configs with a tweak config if available:
function checkTweakLaunch {
	if [ "$USETWEAKS" -eq 1 ]; then
		writelog "$(date) - INFO - ${FUNCNAME[0]} - tweaks enabled"

# first try global config
		if [ -f "$GLOBALTWEAKDIR/$AID.conf" ]; then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - using overrides found in $GLOBALTWEAKDIR/$AID.conf"
			exportCfgFile "$GLOBALTWEAKDIR/$AID.conf"
		fi

# then user config - (overriding the global one)
		if [ -f "$TWEAKDIR/$AID.conf" ]; then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - using overrides found in $TWEAKDIR/$AID.conf"
			exportCfgFile "$TWEAKDIR/$AID.conf"
		fi
	fi
}

function createDefaultCfgs {
	createDefaultGlobalCfg

	if [ -f "$STLDEFGLOBALCFG" ]; then
		exportCfgFile "$STLDEFGLOBALCFG"
	fi

	createProjectDirs
	createDefaultGameCfg
}

# updates or creates option $1 with value $2 in configfile $3:
function updateConfigEntry {
	CFGOPTION="$1"
	CFGVALUE="$2"
	CFGFILE="$3"

	if [ ! -f "$CFGFILE" ]; then
		writelog "$(date) - SKIP - ${FUNCNAME[0]} - configfile $CFGFILE does not exist - skipping config update"
	else
		if [ -n "$CFGVALUE" ]; then
				if [ "$(grep -c "#${CFGOPTION}=" "$CFGFILE")" -eq 1 ]; then
					writelog "$(date) - INFO - ${FUNCNAME[0]} - option $CFGOPTION commented out in config - activating it with the new value $CFGVALUE"
					sed -i "/^#${CFGOPTION}=/c$CFGOPTION=$CFGVALUE" "$CFGFILE"
				elif [ "$(grep -c "${CFGOPTION}=" "$CFGFILE")" -eq 0 ]; then
					writelog "$(date) - INFO - ${FUNCNAME[0]} - $CFGOPTION option missing in config - adding a new line"
					echo "$CFGOPTION=$CFGVALUE" >> "$CFGFILE"
				else
					writelog "$(date) - INFO - ${FUNCNAME[0]} - option $CFGOPTION is updated with the new value $CFGVALUE"
					sed -i "/^${CFGOPTION}=/c$CFGOPTION=$CFGVALUE" "$CFGFILE"
				fi
		else
			writelog "$(date) - SKIP - ${FUNCNAME[0]} - value $CFGVALUE is empty - skipping config update"
		fi
	fi
}

# autoapply configuration settings based on the steam categories the game is in:

function autoCategorySettings {
	STEAMUSERID=$(find "$HOME/.steam/steam/userdata/" -maxdepth 1 -type d -name "[1-9]*")
	SC="$STEAMUSERID/7/remote/sharedconfig.vdf"

	if [ ! -f "$SC" ]; then
		writelog "$(date) - SKIP - ${FUNCNAME[0]} - file $(basename "$SC") not found in steam userid dir - skipping"
	else
		writelog "$(date) - INFO - ${FUNCNAME[0]} - file $(basename "$SC") found in steam userid dir - searching categories for game $AID"

		if [ ! -d "$STLCATEGORYDIR" ]; then
			mkdir "$STLCATEGORYDIR"
		fi
	
		if [ -d "$STLCATEGORYDIR" ] || [ -d "$GLOBALCATEGORYDIR" ] ; then
			while read -r SCAT; do
				if [ -d "$GLOBALCATEGORYDIR" ] ; then
					GLOBALSCATCONF="$GLOBALCATEGORYDIR/$SCAT.conf"
					if [ -f "$GLOBALSCATCONF" ]; then
						writelog "$(date) - OK - ${FUNCNAME[0]} - config $GLOBALSCATCONF found - loading its settings"
						exportCfgFile "$GLOBALSCATCONF"
					else
						writelog "$(date) - SKIP - ${FUNCNAME[0]} - config $GLOBALSCATCONF not found - skipping"
					fi
				fi

				if [ -d "$STLCATEGORYDIR" ] ; then
					SCATCONF="$STLCATEGORYDIR/$SCAT.conf"
					if [ -f "$SCATCONF" ]; then
						writelog "$(date) - OK - ${FUNCNAME[0]} - config $SCATCONF found - loading its settings"
						exportCfgFile "$SCATCONF"
					else
						writelog "$(date) - SKIP - ${FUNCNAME[0]} - config $SCATCONF not found - skipping"
					fi
				fi
			done <<< "$(sed -n "/\"$AID\"/,/}/p;" "$SC" | sed -n "/\"tags\"/,/}/p" | sed -n "/{/,/}/p" | grep -v '{\|}' | awk '{print $2}' | sed "s:\"::g")"
		else
			writelog "$(date) - SKIP - ${FUNCNAME[0]} - directory $STLCATEGORYDIR could not be found or created - skipping"
		fi
	fi
}
	

##### CONFIG BLOCK END #####

### LOG START ###

function writelog {
	if [ -z "$WRITELOG" ]; then
		WRITELOG=1
	fi
	
	if [ "$WRITELOG" -eq 1 ]; then
		echo "$1" >> "$LOGDIR/$AID.log"
	fi

}

### LOG END ###

### STRACE START ###

function stracerun {
	writelog "$(date) - INFO - ${FUNCNAME[0]} - starting stracerun"
	while [ -z "$(GAMEPID)" ]; do 
		writelog "$(date) - WAIT - ${FUNCNAME[0]} - waiting for game process $(GAMEPID)"
		sleep 1
	done
	writelog "$(date) - INFO - ${FUNCNAME[0]} - game process found at $(GAMEPID)"
	writelog "$(date) - INFO - ${FUNCNAME[0]} - $STRACE -p $(GAMEPID) $STRACEOPTS -o $STRACEDIR/$AID.log"
	IFS=" " read -r -a RUNSTRACEOPTS <<< "$STRACEOPTS"

	"$STRACE" -p "$(GAMEPID)" "${RUNSTRACEOPTS[@]}" -o "$STRACEDIR/$AID.log"
}

function checkStraceLaunch {
	if [ -n "$STRACERUN" ]; then
		if [ "$STRACERUN" -eq 1 ]; then
			stracerun &
		fi
	fi
}

### STRACE END ###

### MISC START ###

function netrun {
	writelog "$(date) - INFO - ${FUNCNAME[0]} - starting network traffic monitor"

	while [ -z "$(GAMEPID)" ]; do 
		writelog "$(date) - WAIT - ${FUNCNAME[0]} - waiting for game process $(GAMEPID)"
		sleep 1
	done
	writelog "$(date) - INFO - ${FUNCNAME[0]} - game process $GE found at $(GAMEPID)"

	if [ -n "$NETMONDIR" ]; then
		if [ ! -d "$NETMONDIR" ]; then
			writelog "$(date) - IFO - ${FUNCNAME[0]} - $NETMON dest directory $NETMONDIR does not exist - trying to create it"
			mkdir "$NETMONDIR" 2>/dev/null
		fi

		if [ -d "$NETMONDIR" ]; then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - writing network traffic for $AID int dest directory $NETMONDIR"
			if [ -f "$NETMONDIR/$AID-$NETMON.log" ]; then
				writelog "$(date) - INFO - ${FUNCNAME[0]} - removing old $NETMONDIR/$AID-$NETMON.log"
				rm "$NETMONDIR/$AID-$NETMON.log"
			fi
			IFS=" " read -r -a RUNNETOPTS <<< "$NETOPTS"
			"$NETMON" "${RUNNETOPTS[@]}" | grep "wineserver" | grep -v "localhost\|0.0.0.0" >> "$NETMONDIR/$AID-$NETMON.log"
		else
			writelog "$(date) - SKIP - ${FUNCNAME[0]} - $NETMON dest directory $NETMONDIR still does not exist - skipping"
		fi
	else
		writelog "$(date) - SKIP - ${FUNCNAME[0]} - $NETMON dest directory variable NETMONDIR is empty"
	fi
}

function checkNetMonLaunch {
	if [ -n "$NETMON" ]; then
		netrun &
	fi
}

function preloadForcedTweaks {
	if [ "$AID" -eq "246960" ]; then	# GSTD - Rise of the Owlverlord
		writelog "$(date) - INFO - ${FUNCNAME[0]} - GSTD - Rise of the Owlverlord ($AID) needs hacks to get it to work"
		export USETWEAKS=1
	fi
	
	if [ "$AID" -eq "1225570" ]; then	# Unravel Two
		writelog "$(date) - INFO - ${FUNCNAME[0]} - Unravel Two requires quartz and registry entry"
		export USETWEAKS=1
	fi
}

### MISC END ###


### CUSTOM PROGRAM START ###

function launchCustomProg {
	if [ -z "$CUSTOMCMD" ]; then
		writelog "$(date) - INFO - ${FUNCNAME[0]} - CUSTOMCMD variable is empty - opening file requester"
		ZCUST="$("$STEAM_ZENITY" --title="Select executable file" --file-selection)"
		if [ -n "$ZCUST" ]; then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - $ZCUST selected for CUSTOMCMD - updating configfile $STLGAMECFG"
			updateConfigEntry "CUSTOMCMD" "$ZCUST" "$STLGAMECFG"
			CUSTOMCMD="$ZCUST"
		else
			writelog "$(date) - SKIP - ${FUNCNAME[0]} - nothing selected for CUSTOMCMD - skipping"
			if [ "$ONLY_CUSTOMCMD" -eq 1 ]; then
				writelog "$(date) - SKIP - ${FUNCNAME[0]} - as ONLY_CUSTOMCMD is enabled we're bailing out here"
				closeSTL
				writelog "$(date) - INFO - ######### STOP EARLY $PROGNAME $PROGVERS #########"
				exit
			else
				writelog "$(date) - SKIP - ${FUNCNAME[0]} - continuing with the main game"
				return
			fi
		fi
	fi
	
	if [ -z "$CUSTOMCMD" ]; then
		writelog "$(date) - ERROR - ${FUNCNAME[0]} - CUSTOMCMD variable is empty - but it shouldn't be empty here!"
	fi	
		
	if  [ -x "$(command -v "$CUSTOMCMD" 2>/dev/null)" ]; then
		writelog "$(date) - INFO - ${FUNCNAME[0]} - $CUSTOMCMD found in PATH"
		LACO="$CUSTOMCMD"
		CUSTCOM="$(which "$CUSTOMCMD")"
	else
		writelog "$(date) - INFO - ${FUNCNAME[0]} - $CUSTOMCMD not in path - searching in gamedir"

		if [ -f "$GFD/$CUSTOMCMD" ]; then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - $CUSTOMCMD was found in gamedir $GFD"
			LACO="$GFD/$CUSTOMCMD"
			CUSTCOM="$GFD/$CUSTOMCMD"
		else
			writelog "$(date) - INFO - ${FUNCNAME[0]} - $CUSTOMCMD also not in $GFD/$CUSTOMCMD - checking if absolute path was provided"

			if [ -f "$CUSTOMCMD" ]; then
				writelog "$(date) - INFO - ${FUNCNAME[0]} - $CUSTOMCMD is absolute path"
				LACO="$CUSTOMCMD"
				CUSTCOM="$CUSTOMCMD"
			else
				writelog "$(date) - INFO - ${FUNCNAME[0]} - CUSTOMCMD file $CUSTOMCMD not found - opening file requester"
				ZCUST="$("$STEAM_ZENITY" --title="Select executable file" --file-selection)"
				if [ -n "$ZCUST" ]; then
					writelog "$(date) - INFO - ${FUNCNAME[0]} - $ZCUST selected for CUSTOMCMD - updating configfile $STLGAMECFG"
					updateConfigEntry "CUSTOMCMD" "$ZCUST" "$STLGAMECFG"
					LACO="$ZCUST"
					CUSTCOM="$ZCUST"
					CUSTOMCMD="$ZCUST"
				else
					writelog "$(date) - SKIP - ${FUNCNAME[0]} - nothing selected for CUSTOMCMD - skipping"
					if [ "$ONLY_CUSTOMCMD" -eq 1 ]; then
						writelog "$(date) - SKIP - ${FUNCNAME[0]} - as ONLY_CUSTOMCMD is enabled we're bailing out here"
						closeSTL
						writelog "$(date) - INFO - ######### STOP EARLY $PROGNAME $PROGVERS #########"
						exit
					else
						writelog "$(date) - SKIP - ${FUNCNAME[0]} - continuing with the main game"
						return
					fi
				fi
			fi
		fi
	fi

	if [ -z "$LACO" ]; then
		writelog "$(date) - SKIP - ${FUNCNAME[0]} - ERROR - launch command $LACO empty- skipping launch"
	else
		if [ -z "$CUSTOMCMD_ARGS" ]; then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - starting the custom program $CUSTOMCMD without args"
		else
			writelog "$(date) - INFO - ${FUNCNAME[0]} - starting the custom program $CUSTOMCMD with args: $CUSTOMCMD_ARGS"
		fi
		IFS=" " read -r -a RUNCUSTOMCMD_ARGS <<< "$CUSTOMCMD_ARGS"
		writelog "$(date) - INFO - ${FUNCNAME[0]} - launching custom command with $LACO $CUSTOMCMD_ARGS"
# several variables coming from steam have to be cleaned in order to get wine to work here
		if [ "$(LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" LD_PRELOAD="" file "$CUSTCOM" | grep -c "PE32")" -eq 1 ]; then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - $CUSTCOM seems to be a MS Windows exe - starting through proton"
			CUSTOM_PROTON="$(echo "$*" | awk -F 'waitforexitandrun' '{print $1}')"
			LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" LD_PRELOAD="" WINEDEBUG="-all" WINEPREFIX="$STEAM_COMPAT_DATA_PATH/pfx" "$(dirname "$CUSTOM_PROTON")/dist/bin/wine" "$LACO" "${RUNCUSTOMCMD_ARGS[@]}"
		else
			writelog "$(date) - INFO - ${FUNCNAME[0]} - $CUSTCOM doesn't seem to be a MS Windows exe - regular start (without further analysing)"
			LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" LD_PRELOAD="" $LACO "${RUNCUSTOMCMD_ARGS[@]}"
		fi
	fi

}

function checkCustomLaunch {
	# start a custom program:
	if [ -n "$RUN_CUSTOMCMD" ] ; then
		if [ "$RUN_CUSTOMCMD" -eq 1 ] ; then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - RUN_CUSTOMCMD is set to 1 - trying to start custom program CUSTOMCMD"
		# fork in background and continue
			if [ "$FORK_CUSTOMCMD" -eq 1 ]; then
				writelog "$(date) - INFO - ${FUNCNAME[0]} - FORK_CUSTOMCMD is set to 1 -  forking the custom program in background and continue"
				launchCustomProg "$@" &
		# or wait
			else
				writelog "$(date) - INFO - ${FUNCNAME[0]} - FORK_CUSTOMCMD is set to 0 - starting the custom program regularly"
				launchCustomProg "$@"
			fi


			if [ "$ONLY_CUSTOMCMD" -eq 1 ]; then
				writelog "$(date) - INFO - ${FUNCNAME[0]} - ONLY_CUSTOMCMD is set to 1 means only custom program $CUSTOMCMD is supposed to start - exiting here"
				closeSTL
				writelog "$(date) - INFO - ######### STOP EARLY $PROGNAME $PROGVERS #########"
				exit
			fi
		else
			if [ -n "$CUSTOMCMD" ]; then
				writelog "$(date) - SKIP - ${FUNCNAME[0]} - RUN_CUSTOMCMD is set to 0 therefore skipping the custom program $CUSTOMCMD"
			fi
		fi
	fi
}

function check3rdParty {
	if [ -n "$AID" ] && [ -n "$CUSTOMLAUNCHID" ]; then

		if [ "$AID" -eq "$CUSTOMLAUNCHID" ]; then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - customlaunch AppID $CUSTOMLAUNCHID started"
			if [ "$RUN_CUSTOMCMD" -eq 1 ] ; then
				if [ -n "$CUSTOMCMD" ];then
					writelog "$(date) - INFO - ${FUNCNAME[0]} - CUSTOMCMD is set to $CUSTOMCMD - will start this directly "
				else
					if [ -x "$(command -v "$STEAM_ZENITY" 2>/dev/null)" ]; then
						writelog "$(date) - INFO - ${FUNCNAME[0]} - RUN_CUSTOMCMD is enabled and CUSTOMCMD is empty, starting exe file-selection"

						ZCUST="$("$STEAM_ZENITY" --title="Select EXE file" --file-selection --file-filter='exe files (exe) | *[EeXxEe]')"

						if [ -n "$ZCUST" ]; then
							ONLY_CUSTOMCMD=1
							CUSTOMCMD="$ZCUST"
							writelog "$(date) - INFO - ${FUNCNAME[0]} - will start $ZCUST in the $AID pfx"
						else
							writelog "$(date) - SKIP - ${FUNCNAME[0]} - nothing selected, exiting"
							ONLY_CUSTOMCMD=1
							closeSTL
							writelog "$(date) - INFO - ######### STOP EARLY $PROGNAME $PROGVERS #########"
							exit
						fi
					else
						writelog "$(date) - SKIP - ${FUNCNAME[0]} - $STEAM_ZENITY not found"
					fi
				fi
			else
				writelog "$(date) - INFO - ${FUNCNAME[0]} - RUN_CUSTOMCMD is disabled, starting the regular game"
			fi
		fi
	fi
}

function toggleWindows {
	if [ -n "$TOGGLEWINDOWS" ]; then
		if [ "$TOGGLEWINDOWS" -eq 1 ]; then
			if  [ -x "$(command -v "$WMCTRL" 2>/dev/null)" ]; then
				writelog "$(date) - INFO - ${FUNCNAME[0]} - hiding windows is $1"
				"$WMCTRL" -k "$1"
			else
				writelog "$(date) - SKIP - ${FUNCNAME[0]} - $WMCTRL not found"
			fi
		fi
	fi
}

### CUSTOM PROGRAM END ###


### WINE START ###

function createW32PFX {
	WPFX="$1"

	if [ -n "$WINETRICKSPAKS" ]; then
		if  [ -x "$(command -v "$WINETRICKS" 2>/dev/null)" ]; then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - creating fresh 32bit WINEPREFIX by directly installing $WINETRICKSPAKS silently with $WINETRICKS"
			checkWinetricksInstPak
		else
			writelog "$(date) - SKIP - ${FUNCNAME[0]} - $WINETRICKS not found - skipping WINETRICKSPAKS installation and just creating the WINEPREFIX"
			LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" LD_PRELOAD="" WINEARCH=win32 WINEPREFIX="$WPFX" "$WINECFG"
		fi
	else
		LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" LD_PRELOAD="" WINEARCH=win32 WINEPREFIX="$WPFX" "$WINECFG"
	fi

	if [ -d "$WPFX/drive_c/windows/syswow64" ];then
		mv "$WPFX/drive_c/windows/syswow64" "$WPFX/drive_c/windows/syswow64-$(cut -c1-4 <<< $RANDOM)"
	fi

	if  [ -x "$(command -v "$SETUPDXVK" 2>/dev/null)" ]; then
			mkdir "$WPFX/drive_c/windows/syswow64"
			writelog "$(date) - INFO - ${FUNCNAME[0]} - installing 32bit dxvk  into the 32bit WINEPREFIX using $SETUPDXVK"
			LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" LD_PRELOAD="" WINEARCH=win32 WINEPREFIX="$WPFX" "$SETUPDXVK" install
	else
			writelog "$(date) - SKIP - ${FUNCNAME[0]} - $SETUPDXVK not found, but is required to install 32bit version of dxvk into the 32bit WINEPREFIX!"
	fi

	writelog "$(date) - OK - ${FUNCNAME[0]} - WINEPREFIX should be ready"
	if [ ! -d "$WPFX/drive_c/windows/system32-SAVE" ]; then
		writelog "$(date) - OK - ${FUNCNAME[0]} - copying $WPFX/drive_c/windows/system32 to $WPFX/drive_c/windows/system32-SAVE"
		cp -R "$WPFX/drive_c/windows/system32" "$WPFX/drive_c/windows/system32-SAVE"
	fi
}

# force 32bit pfx if FORCE32BITPFX is set

function check32BitForce {
	if [ "$FORCE32BITPFX" -eq 1 ]; then
		writelog "$(date) - INFO - ${FUNCNAME[0]} - forcing 32bit WINEPREFIX"
		WPFX="$STEAM_COMPAT_DATA_PATH/pfx"
		if [ -d "$WPFX" ];then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - WINEPREFIX $WPFX exists - checking architecture"
			if [ -f "$WPFX/drive_c/windows/syswow64/avifile.dll" ];then	# the dir alone is not enough as proton installs dxvk dlls into this dir, so looking for a random file from a clean win64 pfx
				PFXBACK64="$WPFX"-BACK64
				writelog "$(date) - INFO - ${FUNCNAME[0]} - WINEPREFIX $WPFX is 64bit - creating a 32bit WINEPREFIX instead"
				if [ ! -d "$PFXBACK64" ];then
					mv "$WPFX" "$PFXBACK64"
					writelog "$(date) - INFO - ${FUNCNAME[0]} - backed the 64bit pfx $WPFX to $PFXBACK64 - creating a 32bit WINEPREFIX now"
					createW32PFX "$WPFX"
					mkdir "$WPFX"/drive_c/windows/syswow64
					writelog "$(date) - INFO - ${FUNCNAME[0]} - 32bit WINEPREFIX $WPFX created"
				else
					writelog "$(date) - SKIP - ${FUNCNAME[0]} - 64bit backup $PFXBACK64 already exists - please remove it manually if n longer required! - skipping FORCE32BITPFX"
					FORCE32BITPFX=0
				fi
			else
				writelog "$(date) - SKIP - ${FUNCNAME[0]} - wineprefix $WPFX already is 32bit - nothing to do"
			fi
		else
			writelog "$(date) - INFO - ${FUNCNAME[0]} - wineprefix $WPFX does not exist - creating a fresh 32bit prefix"
			createW32PFX "$WPFX"
		fi
	fi
}

function hackWin32 {
	if [ "$FORCE32BITPFX" -eq 1 ]; then
		if [ "$AID" -eq "246960" ]; then	# Giana Sisters

			if [ -n "$TWEAKWIN" ]; then
				while true; do
					if "$XWININFO" -name "${TWEAKWIN//\"/}" >/dev/null 2>/dev/null; then
						LAUNCHPID="$("$XWININFO" -name "${TWEAKWIN//\"/}" -wm | grep "Process id:" | awk -F 'Process id: ' '{print $2}' | cut -d ' ' -f1)"
						if [ -n "$LAUNCHPID" ]; then
							writelog "$(date) - INFO - ${FUNCNAME[0]} - pid $LAUNCHPID found for $TWEAKWIN - replacing running system32"
							WPFX="$STEAM_COMPAT_DATA_PATH/pfx"
							LIVE32="$WPFX/drive_c/windows/system32"
							SAVE64="$WPFX/drive_c/windows/system64-SAVE"
							SAVE32="$WPFX/drive_c/windows/system32-SAVE"
							if [ -d "$SAVE32" ]; then
								if [ -d "$SAVE64" ]; then
									rm -rf "$SAVE64"
								fi
								mv "$LIVE32" "$SAVE64"
								cp -R "$SAVE32" "$LIVE32"
								writelog "$(date) - OK - ${FUNCNAME[0]} -replaced $LIVE32 with $SAVE32"
							else
								writelog "$(date) - ERROR - ${FUNCNAME[0]} -$SAVE32 does not exist!"
							fi
							break
						else
							writelog "$(date) - INFO - ${FUNCNAME[0]} - waiting for pid $LAUNCHPID for launcher window $TWEAKWIN"
							sleep 1
						fi
					fi
				done
			else
				writelog "$(date) - SKIP - ${FUNCNAME[0]} -TWEAKWIN variable missing - looks like tweak file for $AID was not automatically loaded"
			fi
		fi
	fi	
}

function checkWinetricksInstPak {
	if [ -n "$WINETRICKSPAKS" ]; then
		if  [ -x "$(command -v "$WINETRICKS" 2>/dev/null)" ]; then

			if [ "$FORCE32BITPFX" -eq 1 ]; then
				WARCH=win32
			else
				WARCH=win64
			fi

			WPFX="$STEAM_COMPAT_DATA_PATH/pfx"

			writelog "$(date) - INFO - ${FUNCNAME[0]} - installing $WINETRICKSPAKS silently with $WINETRICKS"
			IFS=" " read -r -a INSTWINETRICKSPAKS <<< "$WINETRICKSPAKS"
# if everything goes well all packages are installed at once:
			LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" LD_PRELOAD="" WINEDEBUG="-all" WINEARCH="$WARCH" WINEPREFIX="$WPFX" "$WINETRICKS" --unattended "${INSTWINETRICKSPAKS[@]}"

			WTLOG="$STEAM_COMPAT_DATA_PATH/pfx/winetricks.log"
			if [ -f "$WTLOG" ]; then
				WTCNT="$(wc -l "$WTLOG" | awk '{print $1}')"
# if not this function tries to install the remaining ones one after another - pretty much untested so far:
				if [ "${#INSTWINETRICKSPAKS[@]}" -gt "$WTCNT" ]; then
					writelog "$(date) - INFO - ${FUNCNAME[0]} - some packages in WINETRICKSPAKS have not been installed yet only $WTCNT of ${#INSTWINETRICKSPAKS[@]} installed so far - trying again"

					IFS=" " read -r -a ISINSTALLED <<<"$(cat "$WTLOG")"
					IFS=" " read -r -a NOTINSTALLED <<< "$(comm -23 <(echo "${INSTWINETRICKSPAKS[*]}") <(echo "${ISINSTALLED[*]}"))"

					if [ -n "${NOTINSTALLED[0]}" ]; then
						for u in "${NOTINSTALLED[@]}"; do
							writelog "$(date) - OK - ${FUNCNAME[0]} - ${#NOTINSTALLED[@]} of ${#INSTWINETRICKSPAKS[@]} - installing $u"
							if [ "$FORCE32BITPFX" -eq 1 ]; then
								mv "$WPFX/drive_c/windows/syswow64" "$WPFX/drive_c/windows/syswow64-$(cut -c1-4 <<< $RANDOM)"
							fi
							LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" LD_PRELOAD="" WINEDEBUG="-all" WINEARCH="$WARCH" WINEPREFIX="$WPFX" "$WINETRICKS" --unattended "$u" 2>"/tmp/inst-$u.log"
							IFS=" " read -r -a ISINSTALLED <<<"$(cat "$WTLOG")"
							IFS=" " read -r -a NOTINSTALLED <<< "$(comm -23 <(echo "${INSTWINETRICKSPAKS[*]}") <(echo "${ISINSTALLED[*]}"))"
						done
					fi
				else								
					writelog "$(date) - OK - ${FUNCNAME[0]} - looks like all ${#INSTWINETRICKSPAKS[@]} packages in WINETRICKSPAKS have been installed successfully"
				fi
			else
				writelog "$(date) - ERROR - ${FUNCNAME[0]} - $WINETRICKS log $WTLOG not found - this should not happen"
			fi
		else
			writelog "$(date) - SKIP - ${FUNCNAME[0]} - $WINETRICKS not found - skipping"
		fi
	fi
}

# start winetricks before game launch:
function checkWinetricksLaunch {
# gui:
	if [ -n "$RUN_WINETRICKS" ]; then
		if [ "$RUN_WINETRICKS" -eq 1 ]; then
			if  [ -x "$(command -v "$WINETRICKS" 2>/dev/null)" ]; then
				writelog "$(date) - INFO - ${FUNCNAME[0]} - launching $WINETRICKS before game start with following commandline:"
				# several variables coming from steam have to be cleaned in order to get wine to work here
				if [ "$FORCE32BITPFX" -eq 1 ]; then
					writelog "$(date) - INFO - ${FUNCNAME[0]} - LC_ALL=\"\" PATH=\"/usr/local/bin:/usr/bin\" LD_LIBRARY_PATH=\"\" LD_PRELOAD=\"\" WINEARCH=win32 WINEPREFIX=\"$STEAM_COMPAT_DATA_PATH/pfx\" $WINETRICKS --gui"
					mv "$WPFX/drive_c/windows/syswow64" "$WPFX/drive_c/windows/syswow64-off"
					LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" LD_PRELOAD="" WINEDEBUG="-all" WINEARCH=win32 WINEPREFIX="$STEAM_COMPAT_DATA_PATH/pfx" "$WINETRICKS" --gui
					mv "$WPFX/drive_c/windows/syswow64-off" "$WPFX/drive_c/windows/syswow64"
				else
					writelog "$(date) - INFO - ${FUNCNAME[0]} - LC_ALL=\"\" PATH=\"/usr/local/bin:/usr/bin\" LD_LIBRARY_PATH=\"\" LD_PRELOAD=\"\" WINEPREFIX=\"$STEAM_COMPAT_DATA_PATH/pfx\" $WINETRICKS --gui"
					LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" LD_PRELOAD="" WINEDEBUG="-all" WINEPREFIX="$STEAM_COMPAT_DATA_PATH/pfx" "$WINETRICKS" --gui
				fi
			else
				writelog "$(date) - SKIP - ${FUNCNAME[0]} - $WINETRICKS not found - skipping"
			fi
		fi
	fi
# silent
	checkWinetricksInstPak
}

# start $WINECFG before game launch:
function checkWineCfgLaunch {
	if [ -n "$RUN_WINECFG" ]; then
		if [ "$RUN_WINECFG" -eq 1 ]; then
			if  [ -x "$(command -v "$WINECFG" 2>/dev/null)" ]; then
				writelog "$(date) - INFO - ${FUNCNAME[0]} - starting $WINECFG before game start:"
				# several variables coming from steam have to be cleaned in order to get wine to work here
				if [ "$FORCE32BITPFX" -eq 1 ]; then
					writelog "$(date) - INFO - ${FUNCNAME[0]} - LC_ALL=\"\" PATH=\"/usr/local/bin:/usr/bin\" LD_LIBRARY_PATH=\"\" LD_PRELOAD=\"\" WINEARCH=win32 WINEPREFIX=\"$STEAM_COMPAT_DATA_PATH/pfx\" $WINECFG"
					mv "$WPFX/drive_c/windows/syswow64" "$WPFX/drive_c/windows/syswow64-off"
					LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" LD_PRELOAD="" WINEARCH=win32 WINEPREFIX="$STEAM_COMPAT_DATA_PATH/pfx" "$WINECFG"
					mv "$WPFX/drive_c/windows/syswow64-off" "$WPFX/drive_c/windows/syswow64"
				else
					writelog "$(date) - INFO - ${FUNCNAME[0]} - LC_ALL=\"\" PATH=\"/usr/local/bin:/usr/bin\" LD_LIBRARY_PATH=\"\" LD_PRELOAD=\"\" WINEPREFIX=\"$STEAM_COMPAT_DATA_PATH/pfx\" winecfg"
					LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" LD_PRELOAD="" WINEPREFIX="$STEAM_COMPAT_DATA_PATH/pfx" "$WINECFG"
				fi
			else
				writelog "$(date) - SKIP - ${FUNCNAME[0]} - $WINECFG not found - skipping"
			fi
		fi
	fi
}

function regEdit {
	writelog "$(date) - INFO - ${FUNCNAME[0]} - $1 found - applying"
	LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" LD_PRELOAD="" WINEPREFIX="$STEAM_COMPAT_DATA_PATH/pfx" regedit "$1"
	updateConfigEntry "REGEDIT" "0" "$STLGAMECFG"
}

function customRegs {
	if [ -n  "$VIRTUALDESKTOP" ]; then
		if [ "$VIRTUALDESKTOP" -eq 1 ]; then
			TEMPREG="/tmp/temp.reg"
			if [ -f "$TEMPREG" ]; then
				rm "$TEMPREG"
			fi

			if touch "$TEMPREG"; then
				writelog "$(date) - INFO - ${FUNCNAME[0]} - VIRTUALDESKTOP is set to 1 - enabling virtual desktop"
				{
				echo "Windows Registry Editor Version 5.00"
				echo "[HKEY_CURRENT_USER\Software\Wine\Explorer]"
				echo "\"Desktop\"=\"Default\""
				echo "[HKEY_CURRENT_USER\Software\Wine\Explorer\Desktops]"
				echo "\"Default\"=\"$(xrandr | grep "\*" | awk '{print $1}')\""
				} >> "$TEMPREG"

				regEdit "$TEMPREG"

				if [ -f "$TEMPREG" ]; then
					rm "$TEMPREG"
				fi

			else
				writelog "$(date) - SKIP - ${FUNCNAME[0]} - could not create $TEMPREG - skipping!"
			fi
		fi
	fi

	if [ "$REGEDIT" -eq 1 ]; then
		writelog "$(date) - INFO - ${FUNCNAME[0]} - REGEDIT set, looking for $AID registry files"

		if [ -f "$GLOBALREGDIR/$AID.reg" ]; then
			regEdit "$GLOBALREGDIR/$AID.reg"
		fi
		
		if [ -f "$STLREGDIR/$AID.reg" ]; then
			regEdit "$STLREGDIR/$AID.reg"
		fi
	else
		if [ "$REGEDIT" -ne 0 ]; then
			if [ -f "$GLOBALREGDIR/$REGEDIT" ]; then
				regEdit "$GLOBALREGDIR/$REGEDIT"
			fi

			if [ -f "$STLREGDIR/$REGEDIT" ]; then
				regEdit "$STLREGDIR/$REGEDIT"		
			fi

			if [ ! -f "$GLOBALREGDIR/$REGEDIT" ] && [ ! -f "$STLREGDIR/$REGEDIT" ]; then
				writelog "$(date) - SKIP - ${FUNCNAME[0]} - neither $GLOBALREGDIR/$REGEDIT nor $STLREGDIR/$REGEDIT not found - skipping"
			fi
		fi
	fi
}

function useNyrna {
	if [ -n "$RUN_NYRNA" ]; then
		if [ "$RUN_NYRNA" -eq 1 ]; then
			if  [ -x "$(command -v "$NYRNA" 2>/dev/null)" ]; then
				if pgrep "$NYRNA" ; then
					writelog "$(date) - SKIP - ${FUNCNAME[0]} - $NYRNA already running - skipping"
					RUN_NYRNA=0
				else
				writelog "$(date) - INFO - ${FUNCNAME[0]} - starting $NYRNA"
				"$NYRNA" &
				fi
			else
				writelog "$(date) - SKIP - ${FUNCNAME[0]} - $NYRNA not found"
			fi
		fi
	fi
}


function useReplay {
	if [ -n "$RUN_REPLAY" ]; then
		if [ "$RUN_REPLAY" -eq 1 ]; then
			if  [ -x "$(command -v "$REPLAY" 2>/dev/null)" ]; then
				if pgrep "$REPLAY" ; then
					writelog "$(date) - SKIP - ${FUNCNAME[0]} - $REPLAY already running - skipping"
					RUN_REPLAY=0
				else
				writelog "$(date) - INFO - ${FUNCNAME[0]} - starting $REPLAY"
				"$REPLAY" &
				fi
			else
				writelog "$(date) - SKIP - ${FUNCNAME[0]} - $REPLAY not found"
			fi
		fi
	fi
}


### WINE END ###

### CORE LAUNCH START ###

## launchSteamProtonGame:
function launchSteamProtonGame {

	createDefaultCfgs

	writelog "$(date) - ######### START $PROGNAME $PROGVERS #########"
	writelog "$(date) - INFO - ${FUNCNAME[0]} - $PROGNAME - game launch args $*"

	writelog "$(date) - INFO - ${FUNCNAME[0]} createGameCfg:"
	createGameCfg "$@"

	writelog "$(date) - INFO - ${FUNCNAME[0]} - editGameConfig:"
	editGameConfig


# we already created  ProjectDirs in createDefaultCfgs but in case a path was changed, we retry here
	writelog "$(date) - INFO - ${FUNCNAME[0]} - createProjectDirs:"
	createProjectDirs

# export game specific variables, exports die with this script, so no worries:
	writelog "$(date) - INFO - ${FUNCNAME[0]} - exporting game specific variables"
	writelog "$(date) - INFO - ${FUNCNAME[0]} - exportCfgFile:"
	exportCfgFile "$STLGAMECFG"

# export DXVK_CONFIG_FILE if STLDXVKCFG was found:
	if [ -f "$STLDXVKCFG" ]; then
		export DXVK_CONFIG_FILE="$STLDXVKCFG"
	fi

# autoapply configuration settings based on the steam categories the game is in:

	writelog "$(date) - INFO - ${FUNCNAME[0]} - autoCategorySettings:"
	autoCategorySettings

# shortcut to enable all required flags for SBSVR with vkbasalt
	if [ -n "$SBSVRVK" ]; then
		if [ "$SBSVRVK" -eq 1 ]; then
			writelog "$(date) - INFO - $PROGNAME - SBSVRVK enabled - starting game in SBS-VR using vkbasalt"
			export RUNSBSVR=1
			export ENABLE_VKBASALT=1
			export SBSVRRS=0
			export USERESHADE=0
		fi
	fi
	
# shortcut to enable all required flags for SBSVR with ReShade
	if [ -n "$SBSVRRS" ]; then
		if [ "$SBSVRRS" -eq 1 ]; then
			writelog "$(date) - INFO - $PROGNAME - SBSVRRS enabled - starting game in SBS-VR using ReShade"
			export RUNSBSVR=1
			export INSTALL_RESHADE=1
			export RESHADE_DEPTH3D=1
			export USERESHADE=1
			export SBSVRVK=0
			export ENABLE_VKBASALT=0
		fi
	fi

# notifier:
	if  [ -x "$(command -v "$NOTY" 2>/dev/null)" ]; then
		"$NOTY" "Steam Tinker Launch started"
	fi

#################

# preload forced tweaks
	writelog "$(date) - INFO - ${FUNCNAME[0]} - preloadForcedTweaks:"
	preloadForcedTweaks

# override tweak settings if USETWEAKS is 1
	writelog "$(date) - INFO - ${FUNCNAME[0]} - checkTweakLaunch:"
	checkTweakLaunch

# force 32bit pfx if  if FORCE32BITPFX is 1
	writelog "$(date) - INFO - ${FUNCNAME[0]} - check32BitForce:"
	check32BitForce "$@"

# start winetricks gui if RUN_WINETRICKS is 1 or silently if WINETRICKSPAKS is not empty
	writelog "$(date) - INFO - ${FUNCNAME[0]} - checkWinetricksLaunch:"
	checkWinetricksLaunch

# start winecfg if RUN_WINECFG is 1
	writelog "$(date) - INFO - ${FUNCNAME[0]} - checkWineCfgLaunch:"
	checkWineCfgLaunch

# apply some regs if requested
	writelog "$(date) - INFO - ${FUNCNAME[0]} - customRegs:"
	customRegs

# minimize all open windows if TOGGLEWINDOWS is 1
	writelog "$(date) - INFO - ${FUNCNAME[0]} - toggleWindows:"
	toggleWindows on

# install ReShade if INSTALL_RESHADE is 1
	writelog "$(date) - INFO - ${FUNCNAME[0]} - installReshade:"
	installReshade "$@"

# install Depth3D Shader if RESHADE_DEPTH3D is 1
	writelog "$(date) - INFO - ${FUNCNAME[0]} - installReshadeDepth3D:"
	installReshadeDepth3D

# start game wih Reshade if USERESHADE is 1
	writelog "$(date) - INFO - ${FUNCNAME[0]} - useReshade:"
	useReshade

# start game wih usevkBasalt ENABLE_VKBASALT is 1
	writelog "$(date) - INFO - ${FUNCNAME[0]} - usevkBasalt:"
	usevkBasalt

# start $NYRNA if RUN_NYRNA is 1
	writelog "$(date) - INFO - ${FUNCNAME[0]} - useNyrnaz:"
	useNyrna

# start $REPLAY if RUN_REPLAY is 1
	writelog "$(date) - INFO - ${FUNCNAME[0]} - useReplay:"
	useReplay

# save game window name after SAVESBSWINNAME seconds
	writelog "$(date) - INFO - ${FUNCNAME[0]} - saveSBSWinName:"
	saveSBSWinName "$@" &

# start game with side-by-side VR if RUNSBSVR is not 0 
	writelog "$(date) - INFO - ${FUNCNAME[0]} - checkSBSVRLaunch:"
	checkSBSVRLaunch

# start 3rdparty game in pfx of $CUSTOMLAUNCHID game
	writelog "$(date) - INFO - ${FUNCNAME[0]} - check3rdParty:"
	check3rdParty "$@"

# start a custom program if RUN_CUSTOMCMD is 1
	writelog "$(date) - INFO - ${FUNCNAME[0]} - checkCustomLaunch:"
	checkCustomLaunch "$@"

# start strace process in the background if STRACERUN is 1
	writelog "$(date) - INFO - ${FUNCNAME[0]} - checkStraceLaunch:"
	checkStraceLaunch

# start network monitor process in the background if NETMON is enabled
	writelog "$(date) - INFO - ${FUNCNAME[0]} - checkNetMonLaunch:"
	checkNetMonLaunch

########################

# the actual game launch:
	IFS=" " read -r -a RUNGAMEARGS <<< "$GAMEARGS"
	PROTONCMD=("${@}" "${RUNGAMEARGS[@]}")

	writelog "$(date) - INFO - ${FUNCNAME[0]} - default proton command: ${PROTONCMD[*]}"

# start without internetaccess:
	if [ "$NOINET" -eq 1 ]; then
		IFS=" " read -r -a RUNNOINET <<< "$NOINET"
		writelog "$(date) - INFO - ${FUNCNAME[0]} - starting $GAMENAME ($AID) with Proton: $(PROTONVERSION "$@") with blocked internet - might fail!"
		LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" LD_PRELOAD="" "${RUNNOINET[0]}" "${PROTONCMD[@]}"
# start with boxtron:
	elif [ "$USEBOXTRON" -eq 1 ]; then
			DOSEXE="$(echo "${PROTONCMD[*]}" | awk -F 'waitforexitandrun ' '{print $2}')"
			if  [ -x "$(command -v "$BOXTRONCMD" 2>/dev/null)" ]; then
				writelog "$(date) - INFO - ${FUNCNAME[0]} - starting game $AID with boxtron: $BOXTRONCMD $BOXTRONARGS $DOSEXE"
				RUNBOXTRONCMD=("$BOXTRONCMD" "$BOXTRONARGS" "$DOSEXE")
				# unset PULSE_LATENCY_MSEC else audio gets stuck
				unset PULSE_LATENCY_MSEC
				"${RUNBOXTRONCMD[@]}"
			else
				writelog "$(date) - ERROR - ${FUNCNAME[0]} -  boxtron command $BOXTRONCMD not found - exit"
				exit
			fi
# start with roberta:
	elif [ "$USEROBERTA" -eq 1 ]; then
			VMEXE="$(echo "${PROTONCMD[*]}" | awk -F 'waitforexitandrun ' '{print $2}')"
			if  [ -x "$(command -v "$ROBERTACMD" 2>/dev/null)" ]; then
				writelog "$(date) - INFO - ${FUNCNAME[0]} - starting game $AID with roberta: $ROBERTACMD $ROBERTAARGS $VMEXE"
				RUNROBERTACMD=("$ROBERTACMD" "$ROBERTAARGS" "$VMEXE")
				LD_LIBRARY_PATH="" "${RUNROBERTACMD[@]}"
			else
				writelog "$(date) - ERROR - ${FUNCNAME[0]} -  roberta command $ROBERTACMD not found - exit"
				exit
			fi
# start with luxtorpeda:
	elif [ "$USELUXTORPEDA" -eq 1 ]; then
			LUXEXE="$(echo "${PROTONCMD[*]}" | awk -F 'waitforexitandrun ' '{print $2}')"
			if  [ -x "$(command -v "$LUXTORPEDACMD" 2>/dev/null)" ]; then
				writelog "$(date) - INFO - ${FUNCNAME[0]} - starting game $AID with luxtorpeda: $LUXTORPEDACMD $LUXTORPEDAARGS $LUXEXE"
				RUNLUXTORPEDACMD=("$LUXTORPEDACMD" "$LUXTORPEDAARGS" "$LUXEXE")
				LD_LIBRARY_PATH="" "${RUNLUXTORPEDACMD[@]}"
			else
				writelog "$(date) - ERROR - ${FUNCNAME[0]} -  luxtorpeda command $LUXTORPEDACMD not found - exit"
				exit
			fi
# start with gamemoderun:
	elif [ "$USEGAMEMODERUN" -eq 1 ]; then
		writelog "$(date) - INFO - ${FUNCNAME[0]} - starting $GAMENAME ($AID) with Proton: $(PROTONVERSION "$@") with $GAMEMODERUN"
			if [ "$FORCE32BITPFX" -eq 1 ]; then
				writelog "$(date) - INFO - ${FUNCNAME[0]} - starting game in 32bit mode"
				hackWin32 &
				LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" LD_PRELOAD="" LD_PRELOAD=0 "$GAMEMODERUN" "${PROTONCMD[@]}"
			else
				"$GAMEMODERUN" "${PROTONCMD[@]}"
			fi
	else
		writelog "$(date) - INFO - ${FUNCNAME[0]} - starting $GAMENAME ($AID) with Proton: $(PROTONVERSION "$@")"
# start with forced 32bit WINEPREFIX:
		if [ "$FORCE32BITPFX" -eq 1 ]; then
			writelog "$(date) - INFO - ${FUNCNAME[0]} - starting game in 32bit mode"
			hackWin32 &
			LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" LD_PRELOAD="" LD_PRELOAD=0 "${PROTONCMD[@]}"
		else
# start normally using proton:
			writelog "$(date) - INFO - ${FUNCNAME[0]} - starting game normally using proton"
			"${PROTONCMD[@]}"
		fi

	fi
	writelog "$(date) - STOP - ######### STOP $PROGNAME $PROGVERS #########"
}

### CORE LAUNCH END ###

### COMMANDLINE START ###

function commandline {
	if [ "$1" == "set" ]; then
		if [ -n "$2" ]; then
				ENTLIST="$(sed -n "/^function createDefaultGameCfg/,/^#ENDcreateDefaultGameCfg/p;/^#ENDcreateDefaultGameCfg/q" "$0" | grep "echo"  | grep "=" | cut -d '"' -f2 | cut -d '=' -f1 | sed 's/^#//')"
				if ! grep "$2" <<< "$ENTLIST" >/dev/null; then
					echo "$2 is no valid entry - valid are:"
					echo "-----------------------"
					echo "$ENTLIST"
					echo "-----------------------"
					exit
				fi
			if [ -n "$3" ]; then
				if [ -z "$4" ]; then
					echo "argument 4 is missing - exit"
					exit
				else
					if [ "$3" == "all" ]; then
						echo "arg3 is all - updating all config files in $STLGAMEDIR:"
						find "$STLGAMEDIR" -name "*.conf" | while read -r file; do
							echo "updating entry $2 to value $4 in config $file"
							updateConfigEntry "$2" "$4" "$file"
						done
					else
						if [ -f "$STLGAMEDIR/$3.conf" ]; then
							echo "updating entry $2 to value $4 in config $STLGAMEDIR/$3.conf"
							updateConfigEntry "$2" "$4" "$STLGAMEDIR/$3.conf"
							else
							echo "config file $STLGAMEDIR/$3.conf does not exist - nothing to do - exit"
							exit
						fi
					fi
				fi
			else
				echo "arg3 is missing, you need to provide either the SteamAppId of the game or 'all' to batch update all gameconfig with the chosen entry!"
				exit	
			fi
		else
			echo "arg2 is missing, you need to provide a valid config entry which should be updated!"
			exit
		fi
	else
		echo "-----------------------"
		echo "arg1 $1 is no valid command"
		createDefaultCfgs
		howto
	fi
}
	
### COMMANDLINE END ###

### CLOSE STL START ###

function closeSTL {
	writelog "$(date) - INFO - ${FUNCNAME[0]} - game $GAMENAME ($AID) exited - cleaning up custom processes if necessary"

# kill $VRVIDEOPLAYER in case it wasn't closed before
	if [ -n "$RUNSBSVR" ]; then
		if [ "$RUNSBSVR" -ge 1 ]; then
			if pgrep "$VRVIDEOPLAYER" ; then
				pkill -9 "$VRVIDEOPLAYER" 
				writelog "$(date) - INFO - ${FUNCNAME[0]} - $VRVIDEOPLAYER killed"
			fi
		fi
	fi
	
# kill $NYRNA if running
	if [ -n "$RUN_NYRNA" ]; then
		if [ "$RUN_NYRNA" -eq 1 ]; then
			if pgrep "$NYRNA" ; then
				pkill -9 "$NYRNA"
				# also remove systray created in /tmp/ ("systray_" with 6 random chars should be save enough)
				find /tmp -maxdepth 1 -type f -regextype posix-extended -regex '^.*systray_[A-Z,a-z,0-9]{6}' -exec rm {} \;
				writelog "$(date) - INFO - ${FUNCNAME[0]} - $NYRNA killed"
			fi
		fi
	fi

# kill $REPLAY if running
	if [ -n "$RUN_REPLAY" ]; then
		if [ "$RUN_REPLAY" -eq 1 ]; then
			if pgrep "$REPLAY" ; then
				pkill -9 "$REPLAY"
				writelog "$(date) - INFO - ${FUNCNAME[0]} - $REPLAY killed"
			fi
		fi
	fi

	if [ -n "$NETMON" ]; then
		if pgrep "$NETMON" ; then
			pkill -9 "$NETMON"
			writelog "$(date) - INFO - ${FUNCNAME[0]} - $NETMON killed"

# remove duplicate lines to make reading easier
			sort -u "$NETMONDIR/$AID-$NETMON.log" -o "$NETMONDIR/$AID-$NETMON.log"
		fi
	fi

	toggleWindows off

	writelog "$(date) - #########  ${FUNCNAME[0]} STOP $PROGNAME $PROGVERS #########"

# should not be necessary, but in case a game forks and partly hangs this could help to gracefully exit wine. if you have doubts feel free to open an issue:
	WINEPREFIX="$STEAM_COMPAT_DATA_PATH/pfx" wineserver -k
	pkill -9 "$PROGCMD" # wip - if the game quit this script should as well, but in theory it could still wait for something with a user defined duration (f.e. SAVESBSWINNAME)
}

### CLOSE STL END ###

# main:#################

if [ -z "$1" ]; then
	echo "no arguments provided - you probably didn't launch this via steam command line arguments"
	createDefaultCfgs
	howto
else
	if echo "$@" | grep "waitforexitandrun"; then	# TODO - accept also linux native games?
		launchSteamProtonGame "$@"
		closeSTL
		writelog "$(date) - ######### STOP $PROGNAME $PROGVERS #########"
	else
		commandline "$@"
	fi
fi
