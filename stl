#!/bin/bash
# shellcheck source=/dev/null

function howto {
	echo "SteamTinkerLaunch v0.02"
	echo " usage: add this program to your steam game command line like 'stl %command%'"
	echo "-----------------------------------"
	echo "  $(basename "$0") will check if a config file exists in $STLCFGDIR for the game exename and will source it if available"
	echo "  if it is not available it is created from a default config file $STLDEFGAMECFG (which is created from the createDefaultCfg function if not available)"
}

#STLLOG="/tmp/$(basename "$0").log"															# log file of this script - currently unused
STLCFGDIR="$HOME/.$(basename "$0")"															# base config dir for this script
STLDXVKDIR="$STLCFGDIR/dxvk"																# base dxvk config dir from where default per game configs are automatically parsed
STLDEFGAMECFG="$STLCFGDIR/default_template.conf"											# the default config template used to create new per game configs - will be autocreated if not found
STLDEFGLOBALCFG="$STLCFGDIR/global.conf"
GP="$(awk -F 'waitforexitandrun ' '{print $NF}' <<< "$@" | awk -F ' GID=' '{print $1}')"	# the absolute game path of the windows game exe
GE="$(basename "$GP" | awk -F '.exe' '{print $1}')"											# just the windows game exe name - will be used as game identifier, as we don't have the steamid here :(
STLGAMECFG="$STLCFGDIR/$GE.conf"																	# the game specific config file which is used by the launched game - created from $STLDEFGAMECFG if not found
#GFD="$(dirname "$GP")"																		# the absolute directory where the game exe lives - currently unused

# create project dirs:
function createProjectDirs {
	if [ ! -d "$STLCFGDIR" ]; then
		mkdir -p "$STLCFGDIR" 2>/dev/null >/dev/null
	fi

	if [ ! -d "$STLDXVKDIR" ]; then
		mkdir -p "$STLDXVKDIR" 2>/dev/null >/dev/null
	fi
}

# create the default global config if not found:
function createDefaultGlobalCfg {
	if [ ! -f "$STLDEFGLOBALCFG" ]; then
		echo "default global config not found - creating it"
		echo "# set JUSTWRITECFG to 1 to exit after writing the default config for the launched game:" | tee "$STLDEFGLOBALCFG"
		echo "JUSTWRITECFG=0" | tee -a "$STLDEFGLOBALCFG"	
		echo "# create an empty \$STLDXVKCFG_tmpl for easier editing when required" | tee -a "$STLDEFGLOBALCFG"
		echo "CREATESTLDXVKCFGTMPL=0" | tee -a "$STLDEFGLOBALCFG"
	fi
}

# create the default cfg "$STLDEFGAMECFG" if not found:
function createDefaultGameCfg {
	if [ ! -f "$STLDEFGAMECFG" ]; then
		echo "default game template config not found - creating it"
		echo "# start game with gamemoderun:" | tee "$STLDEFGAMECFG"
		echo "USEGAMEMODERUN=1" | tee -a "$STLDEFGAMECFG"
		echo "# use mangohud:" | tee -a "$STLDEFGAMECFG"
		echo "MANGOHUD=1" | tee -a "$STLDEFGAMECFG"
		echo "# set radv mode:" | tee -a "$STLDEFGAMECFG"
		echo "RADV_PERFTEST=aco" | tee -a "$STLDEFGAMECFG"
		echo "NOTY=notify-send" | tee -a "$STLDEFGAMECFG"
		echo "# proton vars:" | tee -a "$STLDEFGAMECFG"
		echo "PROTON_LOG=0" | tee -a "$STLDEFGAMECFG"
		echo "#PROTON_DUMP_DEBUG_COMMANDS=0" | tee -a "$STLDEFGAMECFG"
		echo "#PROTON_DEBUG_DIR=/tmp" | tee -a "$STLDEFGAMECFG"
		echo "#PROTON_USE_WINED3D=0" | tee -a "$STLDEFGAMECFG"
		echo "#PROTON_NO_D3D11=0" | tee -a "$STLDEFGAMECFG"
		echo "#PROTON_NO_D3D10=0" | tee -a "$STLDEFGAMECFG"
		echo "#PROTON_NO_ESYNC=0" | tee -a "$STLDEFGAMECFG"
		echo "#PROTON_NO_FSYNC=0" | tee -a "$STLDEFGAMECFG"
		echo "#PROTON_FORCE_LARGE_ADDRESS_AWARE=1" | tee -a "$STLDEFGAMECFG"
		echo "#PROTON_OLD_GL_STRING=0" | tee -a "$STLDEFGAMECFG"
		echo "#PROTON_USE_SECCOMP=0" | tee -a "$STLDEFGAMECFG"
		echo "#PROTON_NO_WRITE_WATCH=0" | tee -a "$STLDEFGAMECFG"
		echo "# dxvk vars - see https://github.com/doitsujin/dxvk" | tee -a "$STLDEFGAMECFG"
		echo "#DXVK_HUD=0" | tee -a "$STLDEFGAMECFG"
		echo "#DXVK_LOG_LEVEL=none|error|warn|info|debug Controls message logging." | tee -a "$STLDEFGAMECFG"
		echo "#DXVK_LOG_PATH=/some/directory Changes path where log files are stored." | tee -a "$STLDEFGAMECFG"
		echo "# wine vars:" | tee -a "$STLDEFGAMECFG"
		echo "#WINE_FULLSCREEN_INTEGER_SCALING=0" | tee -a "$STLDEFGAMECFG"
		echo "default config $STLCFGDIR created - you might want to edit it before use"
	fi
}

# create the game config from $STLDEFGAMECFG if not found
function createGameCfg {
	if [ ! -f "$STLGAMECFG" ] ; then
		cp "$STLDEFGAMECFG" "$STLGAMECFG"
		echo "# set the default config file for DXVK_CONFIG_FILE which is used when found - defaults to config found in $STLDXVKDIR" | tee -a "$STLGAMECFG"
		echo "STLDXVKCFG=$STLDXVKDIR/$GE.conf" | tee -a "$STLGAMECFG"
		
	# exit after creating the game config without starting the game if JUSTWRITECFG is 1:
		source "$STLDEFGLOBALCFG"
	# create "$STLDXVKCFG"_tmpl if configured
		source "$STLGAMECFG"
		if [ ! -f "$STLDXVKCFG" ]; then
			if [ "$CREATESTLDXVKCFGTMPL" -eq 1 ]; then
				touch "$STLDXVKCFG"_tmpl
			fi
		fi

		if [ "$JUSTWRITECFG" -eq 1 ]; then
			exit
		fi
	fi
}

function createDefaultsCfgs {
	createProjectDirs
	createDefaultGlobalCfg
	createDefaultGameCfg
}


## launchsteamprotongame:

function launchsteamprotongame {

createDefaultsCfgs
createGameCfg

# export game specific variables, exports die with this script, so no worries:
	while read -r line; do
		if  echo "$line" | grep -v "^#"; then
#			echo "line ${line?}" | tee -a "$STLLOG"
			export "${line?}"
		fi
	done < "$STLGAMECFG"

# dirtly HACK - todo: just found out that all VR games don't work with MANGOHUD=1 so checking here if vcrompositor is running and disabling it if true
if pgrep "vrcompositor" 2>/dev/null; then
	export MANGOHUD=0
fi

# notifier:
	if  [ -x "$(command -v "$NOTY" 2>/dev/null)" ]; then
		"$NOTY" "Steam Tinker Launch started"
	fi

# export DXVK_CONFIG_FILE if STLDXVKCFG was found:
	if [ -f "$STLDXVKCFG" ]; then
		export DXVK_CONFIG_FILE="$STLDXVKCFG"
	fi

	# the actual game launch - either with or without gamemoderun:

	if [ "$USEGAMEMODERUN" -eq 1 ]; then
		gamemoderun "$@"
	else
		"$@"
	fi
}

# main:
if [ -z "$1" ]; then
	echo "no arguments provided - you probably didn't launch this via steam command line arguments"
	createDefaultsCfgs
	howto
else
	if echo "$@" | grep "waitforexitandrun"; then
#		echo args "$@" | tee -a "$STLLOG"
		launchsteamprotongame "$@"
	else
		echo "$@"
		echo "doesn't contain waitforexitandrun - this doesn't look like a steam proton launch command"
		createDefaultsCfgs
		howto
	fi
fi
