#!/bin/bash
# shellcheck source=/dev/null
# shellcheck disable=SC2154 # we work with steam variables here which are unknown to shellcheck
 
function howto {
	echo "SteamTinkerLaunch v0.1"
	echo " usage: add this program to your steam game command line like 'stl %command%'"
	echo "-----------------------------------"
	echo "  $(basename "$0") will check if a config file exists in $STLCFGDIR for the game exename and will source it if available"
	echo "  if it is not available it is created from a default config file $STLDEFGAMECFG (which is created from the createDefaultCfg function if not available)"
}

AID="$SteamAppId"
STLCFGDIR="$HOME/.$(basename "$0")"															# base config dir for this script
STLDXVKDIR="$STLCFGDIR/dxvk"																# base dxvk config dir from where default per game configs are automatically parsed
STLDEFGAMECFG="$STLCFGDIR/default_template.conf"											# the default config template used to create new per game configs - will be autocreated if not found
STLDEFGLOBALCFG="$STLCFGDIR/global.conf"													# global config
GP="$(awk -F 'waitforexitandrun ' '{print $NF}' <<< "$@" | awk -F ' GID=' '{print $1}')"	# the absolute game path of the windows game exe
GE="$(basename "$GP" | awk -F '.exe' '{print $1}')"											# just the windows game exe name - will be used as game identifier, as we don't have the steamid here :(
STLGAMECFG="$STLCFGDIR/$AID.conf"															# the game specific config file which is used by the launched game - created from $STLDEFGAMECFG if not found
GFD="$(dirname "$GP")"																		# the absolute directory where the game exe lives - unused for optional custom program
GN="$(basename "$PWD")"																		# we are in the gamedir, so this is basically the proper game name


function editGameConfig {
	if [ "$WAITEDITOR" -gt 0 ]; then
		if [ -x "$(command -v "$STEAM_ZENITY" 2>/dev/null)" ]; then
			writelog "$(date) - $STEAM_ZENITY found"
			"$STEAM_ZENITY" --question --text="start editor" --ok-label=edit --cancel-label=cancel --timeout="$WAITEDITOR"
			case $? in
				0) writelog "$(date) - key pressed on launch - starting STLEDITOR $STLEDITOR with config STLGAMECFG $STLGAMECFG)"; "$STLEDITOR" "$STLGAMECFG"
				;;
				1) writelog "$(date) - key not pressed - starting game"
				;;
			esac
		else
			writelog "$(date) - $STEAM_ZENITY not found"
		fi
	fi
}

# create project dirs:
function createProjectDirs {
	if [ ! -d "$STLCFGDIR" ]; then
		mkdir -p "$STLCFGDIR" 2>/dev/null >/dev/null
	fi

	if [ ! -d "$STLDXVKDIR" ]; then
		mkdir -p "$STLDXVKDIR" 2>/dev/null >/dev/null
	fi
}

# create the default global config if not found:
function createDefaultGlobalCfg {
	if [ ! -f "$STLDEFGLOBALCFG" ]; then
		echo "default global config not found - creating it"
		echo "# set JUSTWRITECFG to 1 to exit after writing the default config for the launched game:" | tee "$STLDEFGLOBALCFG"
		echo "JUSTWRITECFG=0" | tee -a "$STLDEFGLOBALCFG"	
		echo "# create an empty \$STLDXVKCFG_tmpl for easier editing when required" | tee -a "$STLDEFGLOBALCFG"
		echo "CREATESTLDXVKCFGTMPL=0" | tee -a "$STLDEFGLOBALCFG"
		echo "# the base strace path used to optionally dump strace logs" | tee -a "$STLDEFGLOBALCFG"
		echo "STRACEDIR=/tmp/" | tee -a "$STLDEFGLOBALCFG"
		echo "# stl logfile" | tee -a "$STLDEFGLOBALCFG"
		echo "STLLOG=/tmp/$(basename "$0").log" | tee -a "$STLDEFGLOBALCFG"
		echo "#write logfile if enabled" | tee -a "$STLDEFGLOBALCFG"
		echo "WRITELOG=1" | tee -a "$STLDEFGLOBALCFG"
		echo "#texteditor to use for opening the gameconfig - f.e. with WAITEDITOR" | tee -a "$STLDEFGLOBALCFG"
		echo "STLEDITOR=geany" | tee -a "$STLDEFGLOBALCFG"
		echo "#wait WAITEDITOR seconds for a keypress to open the texteditor STLEDITOR with the game config" | tee -a "$STLDEFGLOBALCFG"
		echo "WAITEDITOR=2" | tee -a "$STLDEFGLOBALCFG"
	fi
}

# create the default cfg "$STLDEFGAMECFG" if not found:
function createDefaultGameCfg {
	if [ ! -f "$STLDEFGAMECFG" ]; then
		writelog "$(date) - default game template config $STLDEFGAMECFG for not found - creating it"

		echo "# set to 1 to enable the custom command STL_CMD:" | tee "$STLDEFGAMECFG"
		echo "#RUN_STL_CMD=0" | tee -a "$STLDEFGAMECFG"
		echo "# start this custom command:" | tee -a "$STLDEFGAMECFG"
		echo "#STL_CMD=yourProgram" | tee -a "$STLDEFGAMECFG"
		echo "# start STL_CMD command with following args:" | tee -a "$STLDEFGAMECFG"
		echo "#STL_CMD_ARGS=--some --args" | tee -a "$STLDEFGAMECFG"
		echo "# set to 1 to only start above STL_CMD and not the game command itself:" | tee -a "$STLDEFGAMECFG"
		echo "#ONLY_STL_CMD=0" | tee -a "$STLDEFGAMECFG"
		echo "# set to 1 to fork the custom STL_CMD into the background and continue with starting %command%" | tee -a "$STLDEFGAMECFG"
		echo "#FORK_STL_CMD=0" | tee -a "$STLDEFGAMECFG"
		echo "# start game with gamemoderun:" | tee -a "$STLDEFGAMECFG"
		echo "USEGAMEMODERUN=1" | tee -a "$STLDEFGAMECFG"
		echo "# use mangohud:" | tee -a "$STLDEFGAMECFG"
		echo "#MANGOHUD=1" | tee -a "$STLDEFGAMECFG"
		echo "# set radv mode:" | tee -a "$STLDEFGAMECFG"
		echo "#RADV_PERFTEST=aco" | tee -a "$STLDEFGAMECFG"
		echo "# start winetricks gui before game launch:" | tee -a "$STLDEFGAMECFG"
		echo "#RUN_WINETRICKS=1" | tee -a "$STLDEFGAMECFG"
		echo "#NOTY=notify-send" | tee -a "$STLDEFGAMECFG"
		echo "# proton vars:" | tee -a "$STLDEFGAMECFG"
		echo "#PROTON_LOG=0" | tee -a "$STLDEFGAMECFG"
		echo "#PROTON_DUMP_DEBUG_COMMANDS=0" | tee -a "$STLDEFGAMECFG"
		echo "#PROTON_DEBUG_DIR=/tmp" | tee -a "$STLDEFGAMECFG"
		echo "#PROTON_USE_WINED3D=0" | tee -a "$STLDEFGAMECFG"
		echo "#PROTON_NO_D3D11=0" | tee -a "$STLDEFGAMECFG"
		echo "#PROTON_NO_D3D10=0" | tee -a "$STLDEFGAMECFG"
		echo "#PROTON_NO_ESYNC=0" | tee -a "$STLDEFGAMECFG"
		echo "#PROTON_NO_FSYNC=0" | tee -a "$STLDEFGAMECFG"
		echo "#PROTON_FORCE_LARGE_ADDRESS_AWARE=1" | tee -a "$STLDEFGAMECFG"
		echo "#PROTON_OLD_GL_STRING=0" | tee -a "$STLDEFGAMECFG"
		echo "#PROTON_USE_SECCOMP=0" | tee -a "$STLDEFGAMECFG"
		echo "#PROTON_NO_WRITE_WATCH=0" | tee -a "$STLDEFGAMECFG"
		echo "# dxvk vars - see https://github.com/doitsujin/dxvk" | tee -a "$STLDEFGAMECFG"
		echo "#DXVK_HUD=0" | tee -a "$STLDEFGAMECFG"
		echo "#DXVK_LOG_LEVEL=none|error|warn|info|debug Controls message logging." | tee -a "$STLDEFGAMECFG"
		echo "#DXVK_LOG_PATH=/some/directory Changes path where log files are stored." | tee -a "$STLDEFGAMECFG"
		echo "# wine vars:" | tee -a "$STLDEFGAMECFG"
		echo "#WINE_FULLSCREEN_INTEGER_SCALING=0" | tee -a "$STLDEFGAMECFG"
		echo "# strace settings:" | tee -a "$STLDEFGAMECFG"
		echo "#STRACERUN=0" | tee -a "$STLDEFGAMECFG"
		echo "#STRACEOPTS=-f -t -e trace=file" | tee -a "$STLDEFGAMECFG"
	fi
}

# create the game config from $STLDEFGAMECFG if not found
function createGameCfg {
	if [ ! -f "$STLGAMECFG" ] ; then
		echo "#########" | tee "$STLGAMECFG"
		echo "#GAMENAME=$GN" | tee -a "$STLGAMECFG"
		echo "#GAMEEXE=$GE" | tee -a "$STLGAMECFG"
		echo "#GAMEID=$AID" | tee -a "$STLGAMECFG"
		echo "# set the default config file for DXVK_CONFIG_FILE which is used when found - defaults to config found in $STLDXVKDIR" | tee -a "$STLGAMECFG"
		echo "STLDXVKCFG=$STLDXVKDIR/$AID.conf" | tee -a "$STLGAMECFG"
		echo "#########" | tee -a "$STLGAMECFG"

		cat "$STLDEFGAMECFG" >> "$STLGAMECFG"
		
	# exit after creating the game config without starting the game if JUSTWRITECFG is 1:
		source "$STLDEFGLOBALCFG"
	# create "$STLDXVKCFG"_tmpl if configured
		source "$STLGAMECFG"
		if [ ! -f "$STLDXVKCFG" ]; then
			if [ "$CREATESTLDXVKCFGTMPL" -eq 1 ]; then
				touch "$STLDXVKCFG"_tmpl
			fi
		fi

		if [ "$JUSTWRITECFG" -eq 1 ]; then
			exit
		fi
	fi
}

function createDefaultCfgs {
	createProjectDirs
	createDefaultGlobalCfg
	createDefaultGameCfg
}

function writelog {

	if [ -z "$WRITELOG" ]; then
		source "$STLDEFGLOBALCFG"
	fi
	
	if [ "$WRITELOG" -eq 1 ]; then
		echo "$1" | tee -a "$STLLOG"
	fi
}

# shellcheck disable=SC2086	# $STRACEOPTS wasn't accepted as array either, so *worksforme* for now

function stracerun {
	writelog "$(date) - starting stracerun"

	while ! pgrep "$GE" ; do
		writelog "$(date) - waiting for process $GE"
		sleep 0.1
	done
	writelog "$(date) - process $GE found at $(pgrep "$GE")"
	writelog "$(date) - strace -p $(pgrep "$GE") $STRACEOPTS -o $STRACEDIR/$AID.log"
	strace -p "$(pgrep "$GE")" $STRACEOPTS -o "$STRACEDIR/$AID.log"
}

# shellcheck disable=SC2086	# $STL_CMD_ARGS *worksforme* for now

function launchCustomProg {
	writelog "$(date) - starting the custom program $STL_CMD with args: $STL_CMD_ARGS"

	if  [ -x "$(command -v "$STL_CMD" 2>/dev/null)" ]; then
		writelog "$(date) - $STL_CMD found in $PATH"
		LACO="$STL_CMD"
		CUSTCOM="$(which "$STL_CMD")"
	else
		if [ -f "$GFD/$STL_CMD" ]; then
			writelog "$(date) - $STL_CMD was found in game dir $GFD"
			LACO="$GFD/$STL_CMD"
			CUSTCOM="$GFD/$STL_CMD"
		else
			if [ -f "$STL_CMD" ]; then
				writelog "$(date) - $STL_CMD is absolute path"
				LACO="$STL_CMD"
				CUSTCOM="$STL_CMD"
			else
				writelog "$(date) - error - custom command STL_CMD $STL_CMD not found - skipping launch"
			fi
		fi
	fi

	if [ -z "$LACO" ]; then
		writelog "$(date) - error - launch command $LACO empty- skipping launch"
	else
		writelog "$(date) - launching custom command with $LACO $STL_CMD_ARGS"

# for whatever reason 'file' doesn't work from here, so using this basic workaround - won't be enough for all windows binaries but better than nothing
# hexdump taken from https://bbs.archlinux.org/viewtopic.php?id=101254

		offset=$(hexdump -e '1/4 "0x%x"' -s 0x3c -n 4 "$CUSTCOM")
		machine=$(hexdump -e '1/2 "0x%04x"' -s $((offset + 0x4)) -n 2 "$CUSTCOM")
		if [ "$machine" == "0x014c" ] || [ "$machine" == "0x8664" ]; then
#		if [ "$(file "$CUSTCOM" | grep -c "PE32")" -eq 1 ]; then
			writelog "$(date) - with $machine $CUSTCOM seems to be a MS Windows exe - starting through proton"
			CUSTOM_PROTON="$(echo "$*" | awk -F 'waitforexitandrun' '{print $1}')"
			writelog "$(date) - $CUSTOM_PROTON waitforexitandrun $LACO $STL_CMD_ARGS"
#			"$CUSTOM_PROTON" waitforexitandrun $LACO $STL_CMD_ARGS >> "$STLLOG"
			WINEDEBUG="-all" WINEPREFIX="$STEAM_COMPAT_DATA_PATH/pfx" "$(dirname "$CUSTOM_PROTON")/dist/bin/wine" "$LACO" "$STL_CMD_ARGS"
		else
			writelog "$(date) - $CUSTCOM doesn't seem to be a MS Windows exe - regular start (without further analysing)"
			$LACO $STL_CMD_ARGS
		fi
	fi

}

# start winetricks gui before game launch:
function checkWinetricksLaunch {
	if [ "$RUN_WINETRICKS" -eq 1 ]; then
		if  [ -x "$(command -v "winetricks" 2>/dev/null)" ]; then
			writelog "$(date) - launching winetricks before game start with following commandline:"
			writelog "NO_AT_BRIDGE=1  LC_ALL=\"\" PATH=\"/usr/local/bin:/usr/bin\" LD_LIBRARY_PATH=\"\" LD_PRELOAD=\"\" MANGOHUD=0 WINEPREFIX=\"$STEAM_COMPAT_DATA_PATH/pfx\" winetricks --gui"
			NO_AT_BRIDGE=1  LC_ALL="" PATH="/usr/local/bin:/usr/bin" LD_LIBRARY_PATH="" LD_PRELOAD="" MANGOHUD=0 WINEPREFIX="$STEAM_COMPAT_DATA_PATH/pfx" winetricks --gui
		else
			writelog "$(date) - winetricks not found - skipping"
		fi
	fi
}

function checkCustomLaunch {
	# start a custom program:
	if [ "$RUN_STL_CMD" -eq 1 ] ; then
		writelog "$(date) - RUN_STL_CMD is set to 1 - trying to start custom program STL_CMD"
	# fork in background and continue
		if [ "$FORK_STL_CMD" -eq 1 ]; then
			writelog "$(date) - FORK_STL_CMD is set to 1 -  forking the custom program in background and continue"
			launchCustomProg "$@" &
	# or wait
		else
			writelog "$(date) - FORK_STL_CMD is set to 0 - starting the custom program regularly"
			launchCustomProg "$@"
		fi


		if [ "$ONLY_STL_CMD" -eq 1 ]; then
			writelog "$(date) - ONLY_STL_CMD is set to 1 - only custom program $STL_CMD is supposed to start - exiting here"
			exit
		fi
	else
		writelog "$(date) - RUN_STL_CMD is set to 0 - skipping the custom program STL_CMD"
	fi
}


## launchSteamProtonGame:

function launchSteamProtonGame {

	createDefaultCfgs
	createGameCfg
	
	editGameConfig

# export game specific variables, exports die with this script, so no worries:
	while read -r line; do
		if  echo "$line" | grep -v "^#"; then
#			writelog "line ${line?}"
			export "${line?}"
		fi
	done < "$STLGAMECFG"

# maybe start winetricks
	checkWinetricksLaunch

# maybe start a custom program:
	checkCustomLaunch "$@"

# dirtly HACK - MANGOHUD conflicts with VR currently (on amd?) - see https://github.com/flightlessmango/MangoHud/issues/258
	if pgrep "vrcompositor" 2>/dev/null; then
		export MANGOHUD=0
	fi

# notifier:
	if  [ -x "$(command -v "$NOTY" 2>/dev/null)" ]; then
		"$NOTY" "Steam Tinker Launch started"
	fi

# export DXVK_CONFIG_FILE if STLDXVKCFG was found:
	if [ -f "$STLDXVKCFG" ]; then
		export DXVK_CONFIG_FILE="$STLDXVKCFG"
	fi

# start strace process in the background
	if [ "$STRACERUN" -eq 1 ]; then
		stracerun &
	fi

# the actual game launch - either with or without gamemoderun:
	if [ "$USEGAMEMODERUN" -eq 1 ]; then
		gamemoderun "$@"
	else
		"$@"
	fi
}

# main:#################

if [ -z "$1" ]; then
	echo "no arguments provided - you probably didn't launch this via steam command line arguments"
	createDefaultCfgs
	howto
else
	if echo "$@" | grep "waitforexitandrun"; then
		writelog "$(date) - game launch args $*"
		launchSteamProtonGame "$@"
	else
		echo "$@"
		echo "doesn't contain waitforexitandrun - this doesn't look like a steam proton launch command"
		createDefaultCfgs
		howto
	fi
fi
